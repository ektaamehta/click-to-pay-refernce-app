/*
 * Confirmations API
 * Click to Pay checkout used by SRC Initiators to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. Refer to the EMVCo-Secure-Remote-Commerce-Specifications-API-1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.confirmations.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.confirmations.model.CardPendingEvent;
import com.mcs.clicktopay.confirmations.model.DigitalCardStatus;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.confirmations.invoker.JSON;

/**
 * Digital card data contains digital card information to provide reference to the actual PAN or Payment Token without actually disclosing either. Digital card data is grouped based on the following: -  PAN Authorisation Digital Card Information - data used in request and response Messages -  UI/UX Presentation Data - data used in user interfaces to provide the user with a recognisable descriptor -  Digital Card Art - image that accompanies Digital Card information for user interface purposes.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:03.225795086Z[Etc/UTC]")
public class DigitalCardData {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DigitalCardStatus status;

  public static final String SERIALIZED_NAME_PRESENTATION_NAME = "presentationName";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_NAME)
  private String presentationName;

  public static final String SERIALIZED_NAME_DESCRIPTOR_NAME = "descriptorName";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR_NAME)
  private String descriptorName;

  public static final String SERIALIZED_NAME_ART_URI = "artUri";
  @SerializedName(SERIALIZED_NAME_ART_URI)
  private String artUri;

  public static final String SERIALIZED_NAME_ART_HEIGHT = "artHeight";
  @SerializedName(SERIALIZED_NAME_ART_HEIGHT)
  private Integer artHeight;

  public static final String SERIALIZED_NAME_ART_WIDTH = "artWidth";
  @SerializedName(SERIALIZED_NAME_ART_WIDTH)
  private Integer artWidth;

  public static final String SERIALIZED_NAME_PENDING_EVENTS = "pendingEvents";
  @SerializedName(SERIALIZED_NAME_PENDING_EVENTS)
  private List<CardPendingEvent> pendingEvents;

  public DigitalCardData() {
  }

  public DigitalCardData status(DigitalCardStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  public DigitalCardStatus getStatus() {
    return status;
  }

  public void setStatus(DigitalCardStatus status) {
    this.status = status;
  }


  public DigitalCardData presentationName(String presentationName) {
    this.presentationName = presentationName;
    return this;
  }

   /**
   * Presentation text created by the consumer to easily recognise a PAN entered into the DCF. This value is unique to DCF.
   * @return presentationName
  **/
  @jakarta.annotation.Nullable
  public String getPresentationName() {
    return presentationName;
  }

  public void setPresentationName(String presentationName) {
    this.presentationName = presentationName;
  }


  public DigitalCardData descriptorName(String descriptorName) {
    this.descriptorName = descriptorName;
    return this;
  }

   /**
   * Presentation text created by SRC program to describe the PAN as a digital card. The descriptor name is the same across all DCFs.
   * @return descriptorName
  **/
  @jakarta.annotation.Nullable
  public String getDescriptorName() {
    return descriptorName;
  }

  public void setDescriptorName(String descriptorName) {
    this.descriptorName = descriptorName;
  }


  public DigitalCardData artUri(String artUri) {
    this.artUri = artUri;
    return this;
  }

   /**
   * URI that houses the Card Art image to be used for presentation purposes. Can be provided by SRCPI.
   * @return artUri
  **/
  @jakarta.annotation.Nullable
  public String getArtUri() {
    return artUri;
  }

  public void setArtUri(String artUri) {
    this.artUri = artUri;
  }


  public DigitalCardData artHeight(Integer artHeight) {
    this.artHeight = artHeight;
    return this;
  }

   /**
   * Height of the card art in pixels.
   * @return artHeight
  **/
  @jakarta.annotation.Nullable
  public Integer getArtHeight() {
    return artHeight;
  }

  public void setArtHeight(Integer artHeight) {
    this.artHeight = artHeight;
  }


  public DigitalCardData artWidth(Integer artWidth) {
    this.artWidth = artWidth;
    return this;
  }

   /**
   * Width of the card art in pixels.
   * @return artWidth
  **/
  @jakarta.annotation.Nullable
  public Integer getArtWidth() {
    return artWidth;
  }

  public void setArtWidth(Integer artWidth) {
    this.artWidth = artWidth;
  }


  public DigitalCardData pendingEvents(List<CardPendingEvent> pendingEvents) {
    this.pendingEvents = pendingEvents;
    return this;
  }

  public DigitalCardData addPendingEventsItem(CardPendingEvent pendingEventsItem) {
    if (this.pendingEvents == null) {
      this.pendingEvents = new ArrayList<>();
    }
    this.pendingEvents.add(pendingEventsItem);
    return this;
  }

   /**
   * Set of events that are pending completion such as address verification or SCA.
   * @return pendingEvents
  **/
  @jakarta.annotation.Nullable
  public List<CardPendingEvent> getPendingEvents() {
    return pendingEvents;
  }

  public void setPendingEvents(List<CardPendingEvent> pendingEvents) {
    this.pendingEvents = pendingEvents;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DigitalCardData instance itself
   */
  public DigitalCardData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DigitalCardData digitalCardData = (DigitalCardData) o;
    return Objects.equals(this.status, digitalCardData.status) &&
        Objects.equals(this.presentationName, digitalCardData.presentationName) &&
        Objects.equals(this.descriptorName, digitalCardData.descriptorName) &&
        Objects.equals(this.artUri, digitalCardData.artUri) &&
        Objects.equals(this.artHeight, digitalCardData.artHeight) &&
        Objects.equals(this.artWidth, digitalCardData.artWidth) &&
        Objects.equals(this.pendingEvents, digitalCardData.pendingEvents)&&
        Objects.equals(this.additionalProperties, digitalCardData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, presentationName, descriptorName, artUri, artHeight, artWidth, pendingEvents, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DigitalCardData {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    presentationName: ").append(toIndentedString(presentationName)).append("\n");
    sb.append("    descriptorName: ").append(toIndentedString(descriptorName)).append("\n");
    sb.append("    artUri: ").append(toIndentedString(artUri)).append("\n");
    sb.append("    artHeight: ").append(toIndentedString(artHeight)).append("\n");
    sb.append("    artWidth: ").append(toIndentedString(artWidth)).append("\n");
    sb.append("    pendingEvents: ").append(toIndentedString(pendingEvents)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("presentationName");
    openapiFields.add("descriptorName");
    openapiFields.add("artUri");
    openapiFields.add("artHeight");
    openapiFields.add("artWidth");
    openapiFields.add("pendingEvents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DigitalCardData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DigitalCardData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DigitalCardData is not found in the empty JSON string", DigitalCardData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        DigitalCardStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("presentationName") != null && !jsonObj.get("presentationName").isJsonNull()) && !jsonObj.get("presentationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `presentationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("presentationName").toString()));
      }
      if ((jsonObj.get("descriptorName") != null && !jsonObj.get("descriptorName").isJsonNull()) && !jsonObj.get("descriptorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptorName").toString()));
      }
      if ((jsonObj.get("artUri") != null && !jsonObj.get("artUri").isJsonNull()) && !jsonObj.get("artUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pendingEvents") != null && !jsonObj.get("pendingEvents").isJsonNull() && !jsonObj.get("pendingEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingEvents` to be an array in the JSON string but got `%s`", jsonObj.get("pendingEvents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DigitalCardData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DigitalCardData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DigitalCardData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DigitalCardData.class));

       return (TypeAdapter<T>) new TypeAdapter<DigitalCardData>() {
           @Override
           public void write(JsonWriter out, DigitalCardData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DigitalCardData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DigitalCardData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DigitalCardData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DigitalCardData
  * @throws IOException if the JSON string is invalid with respect to DigitalCardData
  */
  public static DigitalCardData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DigitalCardData.class);
  }

 /**
  * Convert an instance of DigitalCardData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

