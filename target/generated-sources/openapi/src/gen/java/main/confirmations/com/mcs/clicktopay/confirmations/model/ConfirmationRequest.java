/*
 * Confirmations API
 * Click to Pay checkout used by SRC Initiators to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. Refer to the EMVCo-Secure-Remote-Commerce-Specifications-API-1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.confirmations.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.confirmations.model.ConfirmationData;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.confirmations.invoker.JSON;

/**
 * ConfirmationRequest
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:03.225795086Z[Etc/UTC]")
public class ConfirmationRequest {
  public static final String SERIALIZED_NAME_SRC_CLIENT_ID = "srcClientId";
  @SerializedName(SERIALIZED_NAME_SRC_CLIENT_ID)
  private String srcClientId;

  public static final String SERIALIZED_NAME_SRC_DPA_ID = "srcDpaId";
  @SerializedName(SERIALIZED_NAME_SRC_DPA_ID)
  private String srcDpaId;

  public static final String SERIALIZED_NAME_SRC_CORRELATION_ID = "srcCorrelationId";
  @SerializedName(SERIALIZED_NAME_SRC_CORRELATION_ID)
  private String srcCorrelationId;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SRCI_TRANSACTION_ID = "srciTransactionId";
  @SerializedName(SERIALIZED_NAME_SRCI_TRANSACTION_ID)
  private String srciTransactionId;

  public static final String SERIALIZED_NAME_CONFIRMATION_DATA = "confirmationData";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_DATA)
  private ConfirmationData confirmationData;

  public ConfirmationRequest() {
  }

  public ConfirmationRequest srcClientId(String srcClientId) {
    this.srcClientId = srcClientId;
    return this;
  }

   /**
   * Identifies the connecting client, e.g. SRCI
   * @return srcClientId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcClientId() {
    return srcClientId;
  }

  public void setSrcClientId(String srcClientId) {
    this.srcClientId = srcClientId;
  }


  public ConfirmationRequest srcDpaId(String srcDpaId) {
    this.srcDpaId = srcDpaId;
    return this;
  }

   /**
   * DPA Identifier provided during onboarding for the DPA accessing the service. Optional parameter but is validated when a value is provided.
   * @return srcDpaId
  **/
  @jakarta.annotation.Nullable
  public String getSrcDpaId() {
    return srcDpaId;
  }

  public void setSrcDpaId(String srcDpaId) {
    this.srcDpaId = srcDpaId;
  }


  public ConfirmationRequest srcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
    return this;
  }

   /**
   * Correlation ID for this transaction. If available within the present checkout session (e.g. received in an earlier API response during the present session), then it must be provided, otherwise a new checkout session will be initiated.
   * @return srcCorrelationId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcCorrelationId() {
    return srcCorrelationId;
  }

  public void setSrcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
  }


  public ConfirmationRequest serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

   /**
   * Identifies a relevant / requested service (program) supported by the Click to Pay System. Use SRC if operating under the common button program (other values are reserved for future use in different scenarios, for example when operating via a commerce platform).
   * @return serviceId
  **/
  @jakarta.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public ConfirmationRequest srciTransactionId(String srciTransactionId) {
    this.srciTransactionId = srciTransactionId;
    return this;
  }

   /**
   * Transaction reference generated by SRCI
   * @return srciTransactionId
  **/
  @jakarta.annotation.Nullable
  public String getSrciTransactionId() {
    return srciTransactionId;
  }

  public void setSrciTransactionId(String srciTransactionId) {
    this.srciTransactionId = srciTransactionId;
  }


  public ConfirmationRequest confirmationData(ConfirmationData confirmationData) {
    this.confirmationData = confirmationData;
    return this;
  }

   /**
   * Get confirmationData
   * @return confirmationData
  **/
  @jakarta.annotation.Nonnull
  public ConfirmationData getConfirmationData() {
    return confirmationData;
  }

  public void setConfirmationData(ConfirmationData confirmationData) {
    this.confirmationData = confirmationData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConfirmationRequest instance itself
   */
  public ConfirmationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfirmationRequest confirmationRequest = (ConfirmationRequest) o;
    return Objects.equals(this.srcClientId, confirmationRequest.srcClientId) &&
        Objects.equals(this.srcDpaId, confirmationRequest.srcDpaId) &&
        Objects.equals(this.srcCorrelationId, confirmationRequest.srcCorrelationId) &&
        Objects.equals(this.serviceId, confirmationRequest.serviceId) &&
        Objects.equals(this.srciTransactionId, confirmationRequest.srciTransactionId) &&
        Objects.equals(this.confirmationData, confirmationRequest.confirmationData)&&
        Objects.equals(this.additionalProperties, confirmationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcClientId, srcDpaId, srcCorrelationId, serviceId, srciTransactionId, confirmationData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfirmationRequest {\n");
    sb.append("    srcClientId: ").append(toIndentedString(srcClientId)).append("\n");
    sb.append("    srcDpaId: ").append(toIndentedString(srcDpaId)).append("\n");
    sb.append("    srcCorrelationId: ").append(toIndentedString(srcCorrelationId)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    srciTransactionId: ").append(toIndentedString(srciTransactionId)).append("\n");
    sb.append("    confirmationData: ").append(toIndentedString(confirmationData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcClientId");
    openapiFields.add("srcDpaId");
    openapiFields.add("srcCorrelationId");
    openapiFields.add("serviceId");
    openapiFields.add("srciTransactionId");
    openapiFields.add("confirmationData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcClientId");
    openapiRequiredFields.add("srcCorrelationId");
    openapiRequiredFields.add("confirmationData");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConfirmationRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfirmationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfirmationRequest is not found in the empty JSON string", ConfirmationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfirmationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcClientId").toString()));
      }
      if ((jsonObj.get("srcDpaId") != null && !jsonObj.get("srcDpaId").isJsonNull()) && !jsonObj.get("srcDpaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcDpaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcDpaId").toString()));
      }
      if (!jsonObj.get("srcCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcCorrelationId").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("srciTransactionId") != null && !jsonObj.get("srciTransactionId").isJsonNull()) && !jsonObj.get("srciTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srciTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srciTransactionId").toString()));
      }
      // validate the required field `confirmationData`
      ConfirmationData.validateJsonElement(jsonObj.get("confirmationData"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfirmationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfirmationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfirmationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfirmationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfirmationRequest>() {
           @Override
           public void write(JsonWriter out, ConfirmationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfirmationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ConfirmationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfirmationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfirmationRequest
  * @throws IOException if the JSON string is invalid with respect to ConfirmationRequest
  */
  public static ConfirmationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfirmationRequest.class);
  }

 /**
  * Convert an instance of ConfirmationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

