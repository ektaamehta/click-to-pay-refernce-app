/*
 * Confirmations API
 * Click to Pay checkout used by SRC Initiators to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. Refer to the EMVCo-Secure-Remote-Commerce-Specifications-API-1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.confirmations.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.confirmations.model.DCF;
import com.mcs.clicktopay.confirmations.model.DigitalCardData;
import com.mcs.clicktopay.confirmations.model.DigitalCardFeatures;
import com.mcs.clicktopay.confirmations.model.MaskedAddress;
import com.mcs.clicktopay.confirmations.model.PaymentCardType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.confirmations.invoker.JSON;

/**
 * MaskedCard
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:03.225795086Z[Etc/UTC]")
public class MaskedCard {
  public static final String SERIALIZED_NAME_SRC_DIGITAL_CARD_ID = "srcDigitalCardId";
  @SerializedName(SERIALIZED_NAME_SRC_DIGITAL_CARD_ID)
  private String srcDigitalCardId;

  public static final String SERIALIZED_NAME_SRC_PAYMENT_CARD_ID = "srcPaymentCardId";
  @SerializedName(SERIALIZED_NAME_SRC_PAYMENT_CARD_ID)
  private String srcPaymentCardId;

  public static final String SERIALIZED_NAME_PAN_BIN = "panBin";
  @SerializedName(SERIALIZED_NAME_PAN_BIN)
  private String panBin;

  public static final String SERIALIZED_NAME_PAN_LAST_FOUR = "panLastFour";
  @SerializedName(SERIALIZED_NAME_PAN_LAST_FOUR)
  private String panLastFour;

  public static final String SERIALIZED_NAME_TOKEN_BIN_RANGE = "tokenBinRange";
  @SerializedName(SERIALIZED_NAME_TOKEN_BIN_RANGE)
  private String tokenBinRange;

  public static final String SERIALIZED_NAME_TOKEN_LAST_FOUR = "tokenLastFour";
  @SerializedName(SERIALIZED_NAME_TOKEN_LAST_FOUR)
  private String tokenLastFour;

  public static final String SERIALIZED_NAME_DIGITAL_CARD_DATA = "digitalCardData";
  @SerializedName(SERIALIZED_NAME_DIGITAL_CARD_DATA)
  private DigitalCardData digitalCardData;

  public static final String SERIALIZED_NAME_PAN_EXPIRATION_MONTH = "panExpirationMonth";
  @SerializedName(SERIALIZED_NAME_PAN_EXPIRATION_MONTH)
  private String panExpirationMonth;

  public static final String SERIALIZED_NAME_PAN_EXPIRATION_YEAR = "panExpirationYear";
  @SerializedName(SERIALIZED_NAME_PAN_EXPIRATION_YEAR)
  private String panExpirationYear;

  public static final String SERIALIZED_NAME_PAYMENT_CARD_DESCRIPTOR = "paymentCardDescriptor";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CARD_DESCRIPTOR)
  private String paymentCardDescriptor;

  public static final String SERIALIZED_NAME_PAYMENT_CARD_TYPE = "paymentCardType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CARD_TYPE)
  private PaymentCardType paymentCardType;

  public static final String SERIALIZED_NAME_DIGITAL_CARD_FEATURES = "digitalCardFeatures";
  @SerializedName(SERIALIZED_NAME_DIGITAL_CARD_FEATURES)
  private List<DigitalCardFeatures> digitalCardFeatures;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_MASKED_BILLING_ADDRESS = "maskedBillingAddress";
  @SerializedName(SERIALIZED_NAME_MASKED_BILLING_ADDRESS)
  private MaskedAddress maskedBillingAddress;

  public static final String SERIALIZED_NAME_DCF = "dcf";
  @SerializedName(SERIALIZED_NAME_DCF)
  private DCF dcf;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_DATE_OF_CARD_CREATED = "dateOfCardCreated";
  @SerializedName(SERIALIZED_NAME_DATE_OF_CARD_CREATED)
  private String dateOfCardCreated;

  public static final String SERIALIZED_NAME_DATE_OF_CARD_LAST_USED = "dateOfCardLastUsed";
  @SerializedName(SERIALIZED_NAME_DATE_OF_CARD_LAST_USED)
  private String dateOfCardLastUsed;

  public MaskedCard() {
  }

  public MaskedCard srcDigitalCardId(String srcDigitalCardId) {
    this.srcDigitalCardId = srcDigitalCardId;
    return this;
  }

   /**
   * Unique identifier for a PAN or payment token that allows a non-SRC Participating Issuer to identify the PAN.  A single PAN can have one or more SRC digital card reference IDs.
   * @return srcDigitalCardId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcDigitalCardId() {
    return srcDigitalCardId;
  }

  public void setSrcDigitalCardId(String srcDigitalCardId) {
    this.srcDigitalCardId = srcDigitalCardId;
  }


  public MaskedCard srcPaymentCardId(String srcPaymentCardId) {
    this.srcPaymentCardId = srcPaymentCardId;
    return this;
  }

   /**
   * A reference representing the PAN that enables the Click to Pay System to communicate with the SRC Participating Issuer without transmitting the actual PAN. It is associated with the SRC Profile to which the payment card belongs and is unique within an Click to Pay System.
   * @return srcPaymentCardId
  **/
  @jakarta.annotation.Nullable
  public String getSrcPaymentCardId() {
    return srcPaymentCardId;
  }

  public void setSrcPaymentCardId(String srcPaymentCardId) {
    this.srcPaymentCardId = srcPaymentCardId;
  }


  public MaskedCard panBin(String panBin) {
    this.panBin = panBin;
    return this;
  }

   /**
   * BIN number of the PAN.
   * @return panBin
  **/
  @jakarta.annotation.Nonnull
  public String getPanBin() {
    return panBin;
  }

  public void setPanBin(String panBin) {
    this.panBin = panBin;
  }


  public MaskedCard panLastFour(String panLastFour) {
    this.panLastFour = panLastFour;
    return this;
  }

   /**
   * The last 4 digits of the PAN.
   * @return panLastFour
  **/
  @jakarta.annotation.Nonnull
  public String getPanLastFour() {
    return panLastFour;
  }

  public void setPanLastFour(String panLastFour) {
    this.panLastFour = panLastFour;
  }


  public MaskedCard tokenBinRange(String tokenBinRange) {
    this.tokenBinRange = tokenBinRange;
    return this;
  }

   /**
   * Specific BIN range or subset of the BIN Range that has been designated only for the purpose of issuing Payment Tokens in an unmasked form
   * @return tokenBinRange
  **/
  @jakarta.annotation.Nullable
  public String getTokenBinRange() {
    return tokenBinRange;
  }

  public void setTokenBinRange(String tokenBinRange) {
    this.tokenBinRange = tokenBinRange;
  }


  public MaskedCard tokenLastFour(String tokenLastFour) {
    this.tokenLastFour = tokenLastFour;
    return this;
  }

   /**
   * Last 4 digit of the payment token.
   * @return tokenLastFour
  **/
  @jakarta.annotation.Nullable
  public String getTokenLastFour() {
    return tokenLastFour;
  }

  public void setTokenLastFour(String tokenLastFour) {
    this.tokenLastFour = tokenLastFour;
  }


  public MaskedCard digitalCardData(DigitalCardData digitalCardData) {
    this.digitalCardData = digitalCardData;
    return this;
  }

   /**
   * Get digitalCardData
   * @return digitalCardData
  **/
  @jakarta.annotation.Nonnull
  public DigitalCardData getDigitalCardData() {
    return digitalCardData;
  }

  public void setDigitalCardData(DigitalCardData digitalCardData) {
    this.digitalCardData = digitalCardData;
  }


  public MaskedCard panExpirationMonth(String panExpirationMonth) {
    this.panExpirationMonth = panExpirationMonth;
    return this;
  }

   /**
   * Two-digit expiry month (MM).
   * @return panExpirationMonth
  **/
  @jakarta.annotation.Nullable
  public String getPanExpirationMonth() {
    return panExpirationMonth;
  }

  public void setPanExpirationMonth(String panExpirationMonth) {
    this.panExpirationMonth = panExpirationMonth;
  }


  public MaskedCard panExpirationYear(String panExpirationYear) {
    this.panExpirationYear = panExpirationYear;
    return this;
  }

   /**
   * Four-digit expiry year (YYYY).
   * @return panExpirationYear
  **/
  @jakarta.annotation.Nullable
  public String getPanExpirationYear() {
    return panExpirationYear;
  }

  public void setPanExpirationYear(String panExpirationYear) {
    this.panExpirationYear = panExpirationYear;
  }


  public MaskedCard paymentCardDescriptor(String paymentCardDescriptor) {
    this.paymentCardDescriptor = paymentCardDescriptor;
    return this;
  }

   /**
   * Conveys the card brand
   * @return paymentCardDescriptor
  **/
  @jakarta.annotation.Nullable
  public String getPaymentCardDescriptor() {
    return paymentCardDescriptor;
  }

  public void setPaymentCardDescriptor(String paymentCardDescriptor) {
    this.paymentCardDescriptor = paymentCardDescriptor;
  }


  public MaskedCard paymentCardType(PaymentCardType paymentCardType) {
    this.paymentCardType = paymentCardType;
    return this;
  }

   /**
   * Get paymentCardType
   * @return paymentCardType
  **/
  @jakarta.annotation.Nullable
  public PaymentCardType getPaymentCardType() {
    return paymentCardType;
  }

  public void setPaymentCardType(PaymentCardType paymentCardType) {
    this.paymentCardType = paymentCardType;
  }


  public MaskedCard digitalCardFeatures(List<DigitalCardFeatures> digitalCardFeatures) {
    this.digitalCardFeatures = digitalCardFeatures;
    return this;
  }

  public MaskedCard addDigitalCardFeaturesItem(DigitalCardFeatures digitalCardFeaturesItem) {
    if (this.digitalCardFeatures == null) {
      this.digitalCardFeatures = new ArrayList<>();
    }
    this.digitalCardFeatures.add(digitalCardFeaturesItem);
    return this;
  }

   /**
   * Card benefits associated with a Digital Card to be presented to the Consumer at the time of checkout.
   * @return digitalCardFeatures
  **/
  @jakarta.annotation.Nullable
  public List<DigitalCardFeatures> getDigitalCardFeatures() {
    return digitalCardFeatures;
  }

  public void setDigitalCardFeatures(List<DigitalCardFeatures> digitalCardFeatures) {
    this.digitalCardFeatures = digitalCardFeatures;
  }


  public MaskedCard countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country code associated with the Card Issuer&#39;s BIN license. ISO 3166-1 alpha 2 country code.
   * @return countryCode
  **/
  @jakarta.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public MaskedCard maskedBillingAddress(MaskedAddress maskedBillingAddress) {
    this.maskedBillingAddress = maskedBillingAddress;
    return this;
  }

   /**
   * Get maskedBillingAddress
   * @return maskedBillingAddress
  **/
  @jakarta.annotation.Nullable
  public MaskedAddress getMaskedBillingAddress() {
    return maskedBillingAddress;
  }

  public void setMaskedBillingAddress(MaskedAddress maskedBillingAddress) {
    this.maskedBillingAddress = maskedBillingAddress;
  }


  public MaskedCard dcf(DCF dcf) {
    this.dcf = dcf;
    return this;
  }

   /**
   * Get dcf
   * @return dcf
  **/
  @jakarta.annotation.Nullable
  public DCF getDcf() {
    return dcf;
  }

  public void setDcf(DCF dcf) {
    this.dcf = dcf;
  }


  public MaskedCard serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

   /**
   * Service identifier associated to a specific configuration
   * @return serviceId
  **/
  @jakarta.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public MaskedCard dateOfCardCreated(String dateOfCardCreated) {
    this.dateOfCardCreated = dateOfCardCreated;
    return this;
  }

   /**
   * Date (in UTC) when card was enrolled into the Click to Pay System.
   * @return dateOfCardCreated
  **/
  @jakarta.annotation.Nonnull
  public String getDateOfCardCreated() {
    return dateOfCardCreated;
  }

  public void setDateOfCardCreated(String dateOfCardCreated) {
    this.dateOfCardCreated = dateOfCardCreated;
  }


  public MaskedCard dateOfCardLastUsed(String dateOfCardLastUsed) {
    this.dateOfCardLastUsed = dateOfCardLastUsed;
    return this;
  }

   /**
   * Date (in UTC) when card was last used for an SRC transaction.
   * @return dateOfCardLastUsed
  **/
  @jakarta.annotation.Nullable
  public String getDateOfCardLastUsed() {
    return dateOfCardLastUsed;
  }

  public void setDateOfCardLastUsed(String dateOfCardLastUsed) {
    this.dateOfCardLastUsed = dateOfCardLastUsed;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MaskedCard instance itself
   */
  public MaskedCard putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaskedCard maskedCard = (MaskedCard) o;
    return Objects.equals(this.srcDigitalCardId, maskedCard.srcDigitalCardId) &&
        Objects.equals(this.srcPaymentCardId, maskedCard.srcPaymentCardId) &&
        Objects.equals(this.panBin, maskedCard.panBin) &&
        Objects.equals(this.panLastFour, maskedCard.panLastFour) &&
        Objects.equals(this.tokenBinRange, maskedCard.tokenBinRange) &&
        Objects.equals(this.tokenLastFour, maskedCard.tokenLastFour) &&
        Objects.equals(this.digitalCardData, maskedCard.digitalCardData) &&
        Objects.equals(this.panExpirationMonth, maskedCard.panExpirationMonth) &&
        Objects.equals(this.panExpirationYear, maskedCard.panExpirationYear) &&
        Objects.equals(this.paymentCardDescriptor, maskedCard.paymentCardDescriptor) &&
        Objects.equals(this.paymentCardType, maskedCard.paymentCardType) &&
        Objects.equals(this.digitalCardFeatures, maskedCard.digitalCardFeatures) &&
        Objects.equals(this.countryCode, maskedCard.countryCode) &&
        Objects.equals(this.maskedBillingAddress, maskedCard.maskedBillingAddress) &&
        Objects.equals(this.dcf, maskedCard.dcf) &&
        Objects.equals(this.serviceId, maskedCard.serviceId) &&
        Objects.equals(this.dateOfCardCreated, maskedCard.dateOfCardCreated) &&
        Objects.equals(this.dateOfCardLastUsed, maskedCard.dateOfCardLastUsed)&&
        Objects.equals(this.additionalProperties, maskedCard.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcDigitalCardId, srcPaymentCardId, panBin, panLastFour, tokenBinRange, tokenLastFour, digitalCardData, panExpirationMonth, panExpirationYear, paymentCardDescriptor, paymentCardType, digitalCardFeatures, countryCode, maskedBillingAddress, dcf, serviceId, dateOfCardCreated, dateOfCardLastUsed, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaskedCard {\n");
    sb.append("    srcDigitalCardId: ").append(toIndentedString(srcDigitalCardId)).append("\n");
    sb.append("    srcPaymentCardId: ").append(toIndentedString(srcPaymentCardId)).append("\n");
    sb.append("    panBin: ").append(toIndentedString(panBin)).append("\n");
    sb.append("    panLastFour: ").append(toIndentedString(panLastFour)).append("\n");
    sb.append("    tokenBinRange: ").append(toIndentedString(tokenBinRange)).append("\n");
    sb.append("    tokenLastFour: ").append(toIndentedString(tokenLastFour)).append("\n");
    sb.append("    digitalCardData: ").append(toIndentedString(digitalCardData)).append("\n");
    sb.append("    panExpirationMonth: ").append(toIndentedString(panExpirationMonth)).append("\n");
    sb.append("    panExpirationYear: ").append(toIndentedString(panExpirationYear)).append("\n");
    sb.append("    paymentCardDescriptor: ").append(toIndentedString(paymentCardDescriptor)).append("\n");
    sb.append("    paymentCardType: ").append(toIndentedString(paymentCardType)).append("\n");
    sb.append("    digitalCardFeatures: ").append(toIndentedString(digitalCardFeatures)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    maskedBillingAddress: ").append(toIndentedString(maskedBillingAddress)).append("\n");
    sb.append("    dcf: ").append(toIndentedString(dcf)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    dateOfCardCreated: ").append(toIndentedString(dateOfCardCreated)).append("\n");
    sb.append("    dateOfCardLastUsed: ").append(toIndentedString(dateOfCardLastUsed)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcDigitalCardId");
    openapiFields.add("srcPaymentCardId");
    openapiFields.add("panBin");
    openapiFields.add("panLastFour");
    openapiFields.add("tokenBinRange");
    openapiFields.add("tokenLastFour");
    openapiFields.add("digitalCardData");
    openapiFields.add("panExpirationMonth");
    openapiFields.add("panExpirationYear");
    openapiFields.add("paymentCardDescriptor");
    openapiFields.add("paymentCardType");
    openapiFields.add("digitalCardFeatures");
    openapiFields.add("countryCode");
    openapiFields.add("maskedBillingAddress");
    openapiFields.add("dcf");
    openapiFields.add("serviceId");
    openapiFields.add("dateOfCardCreated");
    openapiFields.add("dateOfCardLastUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcDigitalCardId");
    openapiRequiredFields.add("panBin");
    openapiRequiredFields.add("panLastFour");
    openapiRequiredFields.add("digitalCardData");
    openapiRequiredFields.add("dateOfCardCreated");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MaskedCard
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaskedCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaskedCard is not found in the empty JSON string", MaskedCard.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MaskedCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcDigitalCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcDigitalCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcDigitalCardId").toString()));
      }
      if ((jsonObj.get("srcPaymentCardId") != null && !jsonObj.get("srcPaymentCardId").isJsonNull()) && !jsonObj.get("srcPaymentCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcPaymentCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcPaymentCardId").toString()));
      }
      if (!jsonObj.get("panBin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panBin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panBin").toString()));
      }
      if (!jsonObj.get("panLastFour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panLastFour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panLastFour").toString()));
      }
      if ((jsonObj.get("tokenBinRange") != null && !jsonObj.get("tokenBinRange").isJsonNull()) && !jsonObj.get("tokenBinRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenBinRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenBinRange").toString()));
      }
      if ((jsonObj.get("tokenLastFour") != null && !jsonObj.get("tokenLastFour").isJsonNull()) && !jsonObj.get("tokenLastFour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenLastFour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenLastFour").toString()));
      }
      // validate the required field `digitalCardData`
      DigitalCardData.validateJsonElement(jsonObj.get("digitalCardData"));
      if ((jsonObj.get("panExpirationMonth") != null && !jsonObj.get("panExpirationMonth").isJsonNull()) && !jsonObj.get("panExpirationMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panExpirationMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panExpirationMonth").toString()));
      }
      if ((jsonObj.get("panExpirationYear") != null && !jsonObj.get("panExpirationYear").isJsonNull()) && !jsonObj.get("panExpirationYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panExpirationYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panExpirationYear").toString()));
      }
      if ((jsonObj.get("paymentCardDescriptor") != null && !jsonObj.get("paymentCardDescriptor").isJsonNull()) && !jsonObj.get("paymentCardDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentCardDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentCardDescriptor").toString()));
      }
      // validate the optional field `paymentCardType`
      if (jsonObj.get("paymentCardType") != null && !jsonObj.get("paymentCardType").isJsonNull()) {
        PaymentCardType.validateJsonElement(jsonObj.get("paymentCardType"));
      }
      if (jsonObj.get("digitalCardFeatures") != null && !jsonObj.get("digitalCardFeatures").isJsonNull()) {
        JsonArray jsonArraydigitalCardFeatures = jsonObj.getAsJsonArray("digitalCardFeatures");
        if (jsonArraydigitalCardFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("digitalCardFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `digitalCardFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("digitalCardFeatures").toString()));
          }

          // validate the optional field `digitalCardFeatures` (array)
          for (int i = 0; i < jsonArraydigitalCardFeatures.size(); i++) {
            DigitalCardFeatures.validateJsonElement(jsonArraydigitalCardFeatures.get(i));
          };
        }
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field `maskedBillingAddress`
      if (jsonObj.get("maskedBillingAddress") != null && !jsonObj.get("maskedBillingAddress").isJsonNull()) {
        MaskedAddress.validateJsonElement(jsonObj.get("maskedBillingAddress"));
      }
      // validate the optional field `dcf`
      if (jsonObj.get("dcf") != null && !jsonObj.get("dcf").isJsonNull()) {
        DCF.validateJsonElement(jsonObj.get("dcf"));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if (!jsonObj.get("dateOfCardCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfCardCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfCardCreated").toString()));
      }
      if ((jsonObj.get("dateOfCardLastUsed") != null && !jsonObj.get("dateOfCardLastUsed").isJsonNull()) && !jsonObj.get("dateOfCardLastUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfCardLastUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfCardLastUsed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaskedCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaskedCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaskedCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaskedCard.class));

       return (TypeAdapter<T>) new TypeAdapter<MaskedCard>() {
           @Override
           public void write(JsonWriter out, MaskedCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MaskedCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             MaskedCard instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MaskedCard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MaskedCard
  * @throws IOException if the JSON string is invalid with respect to MaskedCard
  */
  public static MaskedCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaskedCard.class);
  }

 /**
  * Convert an instance of MaskedCard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

