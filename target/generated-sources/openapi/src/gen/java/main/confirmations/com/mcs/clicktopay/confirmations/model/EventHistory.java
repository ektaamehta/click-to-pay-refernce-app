/*
 * Confirmations API
 * Click to Pay checkout used by SRC Initiators to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. Refer to the EMVCo-Secure-Remote-Commerce-Specifications-API-1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.confirmations.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.confirmations.invoker.JSON;

/**
 * EventHistory
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:03.225795086Z[Etc/UTC]")
public class EventHistory {
  public static final String SERIALIZED_NAME_AGE_OF_SRC_PAN_ENROLMENT_SINCE_CREATED = "ageOfSrcPanEnrolmentSinceCreated";
  @SerializedName(SERIALIZED_NAME_AGE_OF_SRC_PAN_ENROLMENT_SINCE_CREATED)
  private String ageOfSrcPanEnrolmentSinceCreated;

  public static final String SERIALIZED_NAME_SRC_AGE_SINCE_LAST_SUCCESSFUL_TRANSACTION = "srcAgeSinceLastSuccessfulTransaction";
  @SerializedName(SERIALIZED_NAME_SRC_AGE_SINCE_LAST_SUCCESSFUL_TRANSACTION)
  private String srcAgeSinceLastSuccessfulTransaction;

  public static final String SERIALIZED_NAME_AGE_OF_SRC_RELATIONSHIP = "ageOfSrcRelationship";
  @SerializedName(SERIALIZED_NAME_AGE_OF_SRC_RELATIONSHIP)
  private String ageOfSrcRelationship;

  public static final String SERIALIZED_NAME_AGE_OF_CONSUMER_RELATIONSHIP = "ageOfConsumerRelationship";
  @SerializedName(SERIALIZED_NAME_AGE_OF_CONSUMER_RELATIONSHIP)
  private String ageOfConsumerRelationship;

  public static final String SERIALIZED_NAME_BILLING_AND_SHIPPING_RELATIONSHIP = "billingAndShippingRelationship";
  @SerializedName(SERIALIZED_NAME_BILLING_AND_SHIPPING_RELATIONSHIP)
  private String billingAndShippingRelationship;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS_USAGE_NEW = "shippingAddressUsageNew";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS_USAGE_NEW)
  private String shippingAddressUsageNew;

  public static final String SERIALIZED_NAME_AGE_OF_SHIPPING_ADDRESS_USAGE = "ageOfShippingAddressUsage";
  @SerializedName(SERIALIZED_NAME_AGE_OF_SHIPPING_ADDRESS_USAGE)
  private String ageOfShippingAddressUsage;

  public EventHistory() {
  }

  public EventHistory ageOfSrcPanEnrolmentSinceCreated(String ageOfSrcPanEnrolmentSinceCreated) {
    this.ageOfSrcPanEnrolmentSinceCreated = ageOfSrcPanEnrolmentSinceCreated;
    return this;
  }

   /**
   * Age, in days, since the PAN was enrolled in the SRC System
   * @return ageOfSrcPanEnrolmentSinceCreated
  **/
  @jakarta.annotation.Nullable
  public String getAgeOfSrcPanEnrolmentSinceCreated() {
    return ageOfSrcPanEnrolmentSinceCreated;
  }

  public void setAgeOfSrcPanEnrolmentSinceCreated(String ageOfSrcPanEnrolmentSinceCreated) {
    this.ageOfSrcPanEnrolmentSinceCreated = ageOfSrcPanEnrolmentSinceCreated;
  }


  public EventHistory srcAgeSinceLastSuccessfulTransaction(String srcAgeSinceLastSuccessfulTransaction) {
    this.srcAgeSinceLastSuccessfulTransaction = srcAgeSinceLastSuccessfulTransaction;
    return this;
  }

   /**
   * Age, in days, since the PAN/Digital Card/SRC Profile was successfully used for a transaction
   * @return srcAgeSinceLastSuccessfulTransaction
  **/
  @jakarta.annotation.Nullable
  public String getSrcAgeSinceLastSuccessfulTransaction() {
    return srcAgeSinceLastSuccessfulTransaction;
  }

  public void setSrcAgeSinceLastSuccessfulTransaction(String srcAgeSinceLastSuccessfulTransaction) {
    this.srcAgeSinceLastSuccessfulTransaction = srcAgeSinceLastSuccessfulTransaction;
  }


  public EventHistory ageOfSrcRelationship(String ageOfSrcRelationship) {
    this.ageOfSrcRelationship = ageOfSrcRelationship;
    return this;
  }

   /**
   * Age, in days, of the SRC Profile in the SRC System
   * @return ageOfSrcRelationship
  **/
  @jakarta.annotation.Nullable
  public String getAgeOfSrcRelationship() {
    return ageOfSrcRelationship;
  }

  public void setAgeOfSrcRelationship(String ageOfSrcRelationship) {
    this.ageOfSrcRelationship = ageOfSrcRelationship;
  }


  public EventHistory ageOfConsumerRelationship(String ageOfConsumerRelationship) {
    this.ageOfConsumerRelationship = ageOfConsumerRelationship;
    return this;
  }

   /**
   * Age, in days, since the Consumer profile binding event occurred at the SRC Profile
   * @return ageOfConsumerRelationship
  **/
  @jakarta.annotation.Nullable
  public String getAgeOfConsumerRelationship() {
    return ageOfConsumerRelationship;
  }

  public void setAgeOfConsumerRelationship(String ageOfConsumerRelationship) {
    this.ageOfConsumerRelationship = ageOfConsumerRelationship;
  }


  public EventHistory billingAndShippingRelationship(String billingAndShippingRelationship) {
    this.billingAndShippingRelationship = billingAndShippingRelationship;
    return this;
  }

   /**
   * Relationship between the Cardholder billing and shipping information.
   * @return billingAndShippingRelationship
  **/
  @jakarta.annotation.Nullable
  public String getBillingAndShippingRelationship() {
    return billingAndShippingRelationship;
  }

  public void setBillingAndShippingRelationship(String billingAndShippingRelationship) {
    this.billingAndShippingRelationship = billingAndShippingRelationship;
  }


  public EventHistory shippingAddressUsageNew(String shippingAddressUsageNew) {
    this.shippingAddressUsageNew = shippingAddressUsageNew;
    return this;
  }

   /**
   * Date when the shipping address used for this transaction was first used with the SRC Initiator
   * @return shippingAddressUsageNew
  **/
  @jakarta.annotation.Nullable
  public String getShippingAddressUsageNew() {
    return shippingAddressUsageNew;
  }

  public void setShippingAddressUsageNew(String shippingAddressUsageNew) {
    this.shippingAddressUsageNew = shippingAddressUsageNew;
  }


  public EventHistory ageOfShippingAddressUsage(String ageOfShippingAddressUsage) {
    this.ageOfShippingAddressUsage = ageOfShippingAddressUsage;
    return this;
  }

   /**
   * Age, in days, since shipping address used for this transaction was first used by the SRC Initiator
   * @return ageOfShippingAddressUsage
  **/
  @jakarta.annotation.Nullable
  public String getAgeOfShippingAddressUsage() {
    return ageOfShippingAddressUsage;
  }

  public void setAgeOfShippingAddressUsage(String ageOfShippingAddressUsage) {
    this.ageOfShippingAddressUsage = ageOfShippingAddressUsage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EventHistory instance itself
   */
  public EventHistory putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventHistory eventHistory = (EventHistory) o;
    return Objects.equals(this.ageOfSrcPanEnrolmentSinceCreated, eventHistory.ageOfSrcPanEnrolmentSinceCreated) &&
        Objects.equals(this.srcAgeSinceLastSuccessfulTransaction, eventHistory.srcAgeSinceLastSuccessfulTransaction) &&
        Objects.equals(this.ageOfSrcRelationship, eventHistory.ageOfSrcRelationship) &&
        Objects.equals(this.ageOfConsumerRelationship, eventHistory.ageOfConsumerRelationship) &&
        Objects.equals(this.billingAndShippingRelationship, eventHistory.billingAndShippingRelationship) &&
        Objects.equals(this.shippingAddressUsageNew, eventHistory.shippingAddressUsageNew) &&
        Objects.equals(this.ageOfShippingAddressUsage, eventHistory.ageOfShippingAddressUsage)&&
        Objects.equals(this.additionalProperties, eventHistory.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ageOfSrcPanEnrolmentSinceCreated, srcAgeSinceLastSuccessfulTransaction, ageOfSrcRelationship, ageOfConsumerRelationship, billingAndShippingRelationship, shippingAddressUsageNew, ageOfShippingAddressUsage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventHistory {\n");
    sb.append("    ageOfSrcPanEnrolmentSinceCreated: ").append(toIndentedString(ageOfSrcPanEnrolmentSinceCreated)).append("\n");
    sb.append("    srcAgeSinceLastSuccessfulTransaction: ").append(toIndentedString(srcAgeSinceLastSuccessfulTransaction)).append("\n");
    sb.append("    ageOfSrcRelationship: ").append(toIndentedString(ageOfSrcRelationship)).append("\n");
    sb.append("    ageOfConsumerRelationship: ").append(toIndentedString(ageOfConsumerRelationship)).append("\n");
    sb.append("    billingAndShippingRelationship: ").append(toIndentedString(billingAndShippingRelationship)).append("\n");
    sb.append("    shippingAddressUsageNew: ").append(toIndentedString(shippingAddressUsageNew)).append("\n");
    sb.append("    ageOfShippingAddressUsage: ").append(toIndentedString(ageOfShippingAddressUsage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ageOfSrcPanEnrolmentSinceCreated");
    openapiFields.add("srcAgeSinceLastSuccessfulTransaction");
    openapiFields.add("ageOfSrcRelationship");
    openapiFields.add("ageOfConsumerRelationship");
    openapiFields.add("billingAndShippingRelationship");
    openapiFields.add("shippingAddressUsageNew");
    openapiFields.add("ageOfShippingAddressUsage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventHistory
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventHistory is not found in the empty JSON string", EventHistory.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ageOfSrcPanEnrolmentSinceCreated") != null && !jsonObj.get("ageOfSrcPanEnrolmentSinceCreated").isJsonNull()) && !jsonObj.get("ageOfSrcPanEnrolmentSinceCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageOfSrcPanEnrolmentSinceCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ageOfSrcPanEnrolmentSinceCreated").toString()));
      }
      if ((jsonObj.get("srcAgeSinceLastSuccessfulTransaction") != null && !jsonObj.get("srcAgeSinceLastSuccessfulTransaction").isJsonNull()) && !jsonObj.get("srcAgeSinceLastSuccessfulTransaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcAgeSinceLastSuccessfulTransaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcAgeSinceLastSuccessfulTransaction").toString()));
      }
      if ((jsonObj.get("ageOfSrcRelationship") != null && !jsonObj.get("ageOfSrcRelationship").isJsonNull()) && !jsonObj.get("ageOfSrcRelationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageOfSrcRelationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ageOfSrcRelationship").toString()));
      }
      if ((jsonObj.get("ageOfConsumerRelationship") != null && !jsonObj.get("ageOfConsumerRelationship").isJsonNull()) && !jsonObj.get("ageOfConsumerRelationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageOfConsumerRelationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ageOfConsumerRelationship").toString()));
      }
      if ((jsonObj.get("billingAndShippingRelationship") != null && !jsonObj.get("billingAndShippingRelationship").isJsonNull()) && !jsonObj.get("billingAndShippingRelationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAndShippingRelationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAndShippingRelationship").toString()));
      }
      if ((jsonObj.get("shippingAddressUsageNew") != null && !jsonObj.get("shippingAddressUsageNew").isJsonNull()) && !jsonObj.get("shippingAddressUsageNew").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingAddressUsageNew` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingAddressUsageNew").toString()));
      }
      if ((jsonObj.get("ageOfShippingAddressUsage") != null && !jsonObj.get("ageOfShippingAddressUsage").isJsonNull()) && !jsonObj.get("ageOfShippingAddressUsage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageOfShippingAddressUsage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ageOfShippingAddressUsage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<EventHistory>() {
           @Override
           public void write(JsonWriter out, EventHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EventHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             EventHistory instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventHistory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventHistory
  * @throws IOException if the JSON string is invalid with respect to EventHistory
  */
  public static EventHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventHistory.class);
  }

 /**
  * Convert an instance of EventHistory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

