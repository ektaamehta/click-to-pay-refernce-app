/*
 * Confirmations API
 * Click to Pay checkout used by SRC Initiators to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. Refer to the EMVCo-Secure-Remote-Commerce-Specifications-API-1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.confirmations.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.confirmations.invoker.JSON;

/**
 * CommunicationConsent
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:03.225795086Z[Etc/UTC]")
public class CommunicationConsent {
  public static final String SERIALIZED_NAME_COMMUNICATIONS_OPT_IN = "communicationsOptIn";
  @SerializedName(SERIALIZED_NAME_COMMUNICATIONS_OPT_IN)
  private Boolean communicationsOptIn;

  public static final String SERIALIZED_NAME_AFFILIATE_COMMUNICATIONS_OPT_IN = "affiliateCommunicationsOptIn";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_COMMUNICATIONS_OPT_IN)
  private Boolean affiliateCommunicationsOptIn;

  public static final String SERIALIZED_NAME_ALLOW_EMAIL = "allowEmail";
  @SerializedName(SERIALIZED_NAME_ALLOW_EMAIL)
  private Boolean allowEmail;

  public static final String SERIALIZED_NAME_ALLOW_TEXT = "allowText";
  @SerializedName(SERIALIZED_NAME_ALLOW_TEXT)
  private Boolean allowText;

  public static final String SERIALIZED_NAME_ALLOW_CALL = "allowCall";
  @SerializedName(SERIALIZED_NAME_ALLOW_CALL)
  private Boolean allowCall;

  public static final String SERIALIZED_NAME_ALLOW_PUSH = "allowPush";
  @SerializedName(SERIALIZED_NAME_ALLOW_PUSH)
  private Boolean allowPush;

  public CommunicationConsent() {
  }

  public CommunicationConsent communicationsOptIn(Boolean communicationsOptIn) {
    this.communicationsOptIn = communicationsOptIn;
    return this;
  }

   /**
   * Consumer&#39;s \&quot;Communications Opt in\&quot; preference.
   * @return communicationsOptIn
  **/
  @jakarta.annotation.Nullable
  public Boolean getCommunicationsOptIn() {
    return communicationsOptIn;
  }

  public void setCommunicationsOptIn(Boolean communicationsOptIn) {
    this.communicationsOptIn = communicationsOptIn;
  }


  public CommunicationConsent affiliateCommunicationsOptIn(Boolean affiliateCommunicationsOptIn) {
    this.affiliateCommunicationsOptIn = affiliateCommunicationsOptIn;
    return this;
  }

   /**
   * Consumer&#39;s \&quot;Affiliate Communications Opt in\&quot; preference.
   * @return affiliateCommunicationsOptIn
  **/
  @jakarta.annotation.Nullable
  public Boolean getAffiliateCommunicationsOptIn() {
    return affiliateCommunicationsOptIn;
  }

  public void setAffiliateCommunicationsOptIn(Boolean affiliateCommunicationsOptIn) {
    this.affiliateCommunicationsOptIn = affiliateCommunicationsOptIn;
  }


  public CommunicationConsent allowEmail(Boolean allowEmail) {
    this.allowEmail = allowEmail;
    return this;
  }

   /**
   * Consumer&#39;s \&quot;Communications\&quot; preference for the email channel.
   * @return allowEmail
  **/
  @jakarta.annotation.Nullable
  public Boolean getAllowEmail() {
    return allowEmail;
  }

  public void setAllowEmail(Boolean allowEmail) {
    this.allowEmail = allowEmail;
  }


  public CommunicationConsent allowText(Boolean allowText) {
    this.allowText = allowText;
    return this;
  }

   /**
   * Consumer&#39;s \&quot;Communications\&quot; preference for the SMS channel.
   * @return allowText
  **/
  @jakarta.annotation.Nullable
  public Boolean getAllowText() {
    return allowText;
  }

  public void setAllowText(Boolean allowText) {
    this.allowText = allowText;
  }


  public CommunicationConsent allowCall(Boolean allowCall) {
    this.allowCall = allowCall;
    return this;
  }

   /**
   * Consumer&#39;s \&quot;Communications\&quot; preference for the telephony channel.
   * @return allowCall
  **/
  @jakarta.annotation.Nullable
  public Boolean getAllowCall() {
    return allowCall;
  }

  public void setAllowCall(Boolean allowCall) {
    this.allowCall = allowCall;
  }


  public CommunicationConsent allowPush(Boolean allowPush) {
    this.allowPush = allowPush;
    return this;
  }

   /**
   * Consumer&#39;s \&quot;Communications\&quot; preference for the push notification channel.
   * @return allowPush
  **/
  @jakarta.annotation.Nullable
  public Boolean getAllowPush() {
    return allowPush;
  }

  public void setAllowPush(Boolean allowPush) {
    this.allowPush = allowPush;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CommunicationConsent instance itself
   */
  public CommunicationConsent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommunicationConsent communicationConsent = (CommunicationConsent) o;
    return Objects.equals(this.communicationsOptIn, communicationConsent.communicationsOptIn) &&
        Objects.equals(this.affiliateCommunicationsOptIn, communicationConsent.affiliateCommunicationsOptIn) &&
        Objects.equals(this.allowEmail, communicationConsent.allowEmail) &&
        Objects.equals(this.allowText, communicationConsent.allowText) &&
        Objects.equals(this.allowCall, communicationConsent.allowCall) &&
        Objects.equals(this.allowPush, communicationConsent.allowPush)&&
        Objects.equals(this.additionalProperties, communicationConsent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(communicationsOptIn, affiliateCommunicationsOptIn, allowEmail, allowText, allowCall, allowPush, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommunicationConsent {\n");
    sb.append("    communicationsOptIn: ").append(toIndentedString(communicationsOptIn)).append("\n");
    sb.append("    affiliateCommunicationsOptIn: ").append(toIndentedString(affiliateCommunicationsOptIn)).append("\n");
    sb.append("    allowEmail: ").append(toIndentedString(allowEmail)).append("\n");
    sb.append("    allowText: ").append(toIndentedString(allowText)).append("\n");
    sb.append("    allowCall: ").append(toIndentedString(allowCall)).append("\n");
    sb.append("    allowPush: ").append(toIndentedString(allowPush)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("communicationsOptIn");
    openapiFields.add("affiliateCommunicationsOptIn");
    openapiFields.add("allowEmail");
    openapiFields.add("allowText");
    openapiFields.add("allowCall");
    openapiFields.add("allowPush");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CommunicationConsent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommunicationConsent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommunicationConsent is not found in the empty JSON string", CommunicationConsent.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommunicationConsent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommunicationConsent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommunicationConsent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommunicationConsent.class));

       return (TypeAdapter<T>) new TypeAdapter<CommunicationConsent>() {
           @Override
           public void write(JsonWriter out, CommunicationConsent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CommunicationConsent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CommunicationConsent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CommunicationConsent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CommunicationConsent
  * @throws IOException if the JSON string is invalid with respect to CommunicationConsent
  */
  public static CommunicationConsent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommunicationConsent.class);
  }

 /**
  * Convert an instance of CommunicationConsent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

