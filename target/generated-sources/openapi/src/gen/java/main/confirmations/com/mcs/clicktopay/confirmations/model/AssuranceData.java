/*
 * Confirmations API
 * Click to Pay checkout used by SRC Initiators to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. Refer to the EMVCo-Secure-Remote-Commerce-Specifications-API-1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.confirmations.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.confirmations.invoker.JSON;

/**
 * Information about any risk assessment functions performed by the Mastercard Click to Pay System.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:03.225795086Z[Etc/UTC]")
public class AssuranceData {
  public static final String SERIALIZED_NAME_VERIFICATION_TYPE = "VerificationType";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TYPE)
  private String verificationType;

  public static final String SERIALIZED_NAME_VERIFICATION_ENTITY = "VerificationEntity";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_ENTITY)
  private String verificationEntity;

  public static final String SERIALIZED_NAME_VERIFICATION_METHOD = "VerificationMethod";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_METHOD)
  private String verificationMethod;

  public static final String SERIALIZED_NAME_VERIFICATION_RESULTS = "VerificationResults";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_RESULTS)
  private String verificationResults;

  public static final String SERIALIZED_NAME_VERIFICATION_EVENT = "VerificationEvent";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_EVENT)
  private String verificationEvent;

  public AssuranceData() {
  }

  public AssuranceData verificationType(String verificationType) {
    this.verificationType = verificationType;
    return this;
  }

   /**
   * Type of the verification data. Valid value includes   - CARDHOLDER
   * @return verificationType
  **/
  @jakarta.annotation.Nullable
  public String getVerificationType() {
    return verificationType;
  }

  public void setVerificationType(String verificationType) {
    this.verificationType = verificationType;
  }


  public AssuranceData verificationEntity(String verificationEntity) {
    this.verificationEntity = verificationEntity;
    return this;
  }

   /**
   * Entity performing card verification. Valid value includes     - 03 SRCPI
   * @return verificationEntity
  **/
  @jakarta.annotation.Nullable
  public String getVerificationEntity() {
    return verificationEntity;
  }

  public void setVerificationEntity(String verificationEntity) {
    this.verificationEntity = verificationEntity;
  }


  public AssuranceData verificationMethod(String verificationMethod) {
    this.verificationMethod = verificationMethod;
    return this;
  }

   /**
   * Card Issuer verification of the Cardholder. Valid values are   - 01 - Use of a 3-D Secure ACS    - 04 - A shared secret between the Card Issuer and the Cardholder such as One Time Passcode (OTP), activation code
   * @return verificationMethod
  **/
  @jakarta.annotation.Nullable
  public String getVerificationMethod() {
    return verificationMethod;
  }

  public void setVerificationMethod(String verificationMethod) {
    this.verificationMethod = verificationMethod;
  }


  public AssuranceData verificationResults(String verificationResults) {
    this.verificationResults = verificationResults;
    return this;
  }

   /**
   * Verification status of a PAN. Valid values are:  - 01 - Verified  - 03 - Not performed  - 04 - Not Required
   * @return verificationResults
  **/
  @jakarta.annotation.Nullable
  public String getVerificationResults() {
    return verificationResults;
  }

  public void setVerificationResults(String verificationResults) {
    this.verificationResults = verificationResults;
  }


  public AssuranceData verificationEvent(String verificationEvent) {
    this.verificationEvent = verificationEvent;
    return this;
  }

   /**
   * Indicates the event where verification occurred. Valid value includes  - 02 - Add card/Card enrollment
   * @return verificationEvent
  **/
  @jakarta.annotation.Nullable
  public String getVerificationEvent() {
    return verificationEvent;
  }

  public void setVerificationEvent(String verificationEvent) {
    this.verificationEvent = verificationEvent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AssuranceData instance itself
   */
  public AssuranceData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssuranceData assuranceData = (AssuranceData) o;
    return Objects.equals(this.verificationType, assuranceData.verificationType) &&
        Objects.equals(this.verificationEntity, assuranceData.verificationEntity) &&
        Objects.equals(this.verificationMethod, assuranceData.verificationMethod) &&
        Objects.equals(this.verificationResults, assuranceData.verificationResults) &&
        Objects.equals(this.verificationEvent, assuranceData.verificationEvent)&&
        Objects.equals(this.additionalProperties, assuranceData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verificationType, verificationEntity, verificationMethod, verificationResults, verificationEvent, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssuranceData {\n");
    sb.append("    verificationType: ").append(toIndentedString(verificationType)).append("\n");
    sb.append("    verificationEntity: ").append(toIndentedString(verificationEntity)).append("\n");
    sb.append("    verificationMethod: ").append(toIndentedString(verificationMethod)).append("\n");
    sb.append("    verificationResults: ").append(toIndentedString(verificationResults)).append("\n");
    sb.append("    verificationEvent: ").append(toIndentedString(verificationEvent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VerificationType");
    openapiFields.add("VerificationEntity");
    openapiFields.add("VerificationMethod");
    openapiFields.add("VerificationResults");
    openapiFields.add("VerificationEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AssuranceData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssuranceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssuranceData is not found in the empty JSON string", AssuranceData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("VerificationType") != null && !jsonObj.get("VerificationType").isJsonNull()) && !jsonObj.get("VerificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VerificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VerificationType").toString()));
      }
      if ((jsonObj.get("VerificationEntity") != null && !jsonObj.get("VerificationEntity").isJsonNull()) && !jsonObj.get("VerificationEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VerificationEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VerificationEntity").toString()));
      }
      if ((jsonObj.get("VerificationMethod") != null && !jsonObj.get("VerificationMethod").isJsonNull()) && !jsonObj.get("VerificationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VerificationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VerificationMethod").toString()));
      }
      if ((jsonObj.get("VerificationResults") != null && !jsonObj.get("VerificationResults").isJsonNull()) && !jsonObj.get("VerificationResults").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VerificationResults` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VerificationResults").toString()));
      }
      if ((jsonObj.get("VerificationEvent") != null && !jsonObj.get("VerificationEvent").isJsonNull()) && !jsonObj.get("VerificationEvent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VerificationEvent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VerificationEvent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssuranceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssuranceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssuranceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssuranceData.class));

       return (TypeAdapter<T>) new TypeAdapter<AssuranceData>() {
           @Override
           public void write(JsonWriter out, AssuranceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AssuranceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AssuranceData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssuranceData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssuranceData
  * @throws IOException if the JSON string is invalid with respect to AssuranceData
  */
  public static AssuranceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssuranceData.class);
  }

 /**
  * Convert an instance of AssuranceData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

