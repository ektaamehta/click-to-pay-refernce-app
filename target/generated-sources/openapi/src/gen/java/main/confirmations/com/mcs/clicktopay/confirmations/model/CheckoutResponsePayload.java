/*
 * Confirmations API
 * Click to Pay checkout used by SRC Initiators to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. Refer to the EMVCo-Secure-Remote-Commerce-Specifications-API-1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.confirmations.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.confirmations.model.AssuranceData;
import com.mcs.clicktopay.confirmations.model.MaskedCard;
import com.mcs.clicktopay.confirmations.model.MaskedConsumer;
import com.mcs.clicktopay.confirmations.model.Payload;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.confirmations.invoker.JSON;

/**
 * The following conditionality statements apply whether or not a CheckoutResponseJws structure is used to carry the data. * The \&quot;encryptedPayload\&quot; object will be present depending on the value of payloadTypeIndicatorCheckout parameter. Only Full is supported * The \&quot;shippingAddressZip\&quot; parameter will be present depending on the dpaShippingPreference option in the dpaTransactionOptions structure and either a shippingAddressId or shippingAddress object was present in the Checkout request data * The \&quot;maskedConsumer\&quot; object will be present if the associated SRC Profile contains Consumer data * The \&quot;shippingCountryCode\&quot; parameter will be present depending on the dpaShippingPreference option in the dpaTransactionOptions structure and either a shippingAddressId or shippingAddress object was present in the Checkout request data * The presence of \&quot;assuranceData\&quot; in the response is implementation specific * The presence of \&quot;srciTransactionId\&quot; in the response should be required when passed in the checkout request 
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:03.225795086Z[Etc/UTC]")
public class CheckoutResponsePayload {
  public static final String SERIALIZED_NAME_SRC_CORRELATION_ID = "srcCorrelationId";
  @SerializedName(SERIALIZED_NAME_SRC_CORRELATION_ID)
  private String srcCorrelationId;

  public static final String SERIALIZED_NAME_SRCI_TRANSACTION_ID = "srciTransactionId";
  @SerializedName(SERIALIZED_NAME_SRCI_TRANSACTION_ID)
  private String srciTransactionId;

  public static final String SERIALIZED_NAME_ENCRYPTED_PAYLOAD = "encryptedPayload";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_PAYLOAD)
  private Payload encryptedPayload;

  public static final String SERIALIZED_NAME_MASKED_CARD = "maskedCard";
  @SerializedName(SERIALIZED_NAME_MASKED_CARD)
  private MaskedCard maskedCard;

  public static final String SERIALIZED_NAME_MASKED_CONSUMER = "maskedConsumer";
  @SerializedName(SERIALIZED_NAME_MASKED_CONSUMER)
  private MaskedConsumer maskedConsumer;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS_ZIP = "shippingAddressZip";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS_ZIP)
  private String shippingAddressZip;

  public static final String SERIALIZED_NAME_SHIPPING_COUNTRY_CODE = "shippingCountryCode";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COUNTRY_CODE)
  private String shippingCountryCode;

  public static final String SERIALIZED_NAME_ASSURANCE_DATA = "assuranceData";
  @SerializedName(SERIALIZED_NAME_ASSURANCE_DATA)
  private AssuranceData assuranceData;

  public CheckoutResponsePayload() {
  }

  public CheckoutResponsePayload srcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
    return this;
  }

   /**
   * Correlation ID for this transaction. If available within the present checkout session (e.g. received in an earlier API response during the present session), then it must be provided, otherwise a new checkout session will be initiated 
   * @return srcCorrelationId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcCorrelationId() {
    return srcCorrelationId;
  }

  public void setSrcCorrelationId(String srcCorrelationId) {
    this.srcCorrelationId = srcCorrelationId;
  }


  public CheckoutResponsePayload srciTransactionId(String srciTransactionId) {
    this.srciTransactionId = srciTransactionId;
    return this;
  }

   /**
   * Transaction reference generated by SRCI
   * @return srciTransactionId
  **/
  @jakarta.annotation.Nullable
  public String getSrciTransactionId() {
    return srciTransactionId;
  }

  public void setSrciTransactionId(String srciTransactionId) {
    this.srciTransactionId = srciTransactionId;
  }


  public CheckoutResponsePayload encryptedPayload(Payload encryptedPayload) {
    this.encryptedPayload = encryptedPayload;
    return this;
  }

   /**
   * Get encryptedPayload
   * @return encryptedPayload
  **/
  @jakarta.annotation.Nullable
  public Payload getEncryptedPayload() {
    return encryptedPayload;
  }

  public void setEncryptedPayload(Payload encryptedPayload) {
    this.encryptedPayload = encryptedPayload;
  }


  public CheckoutResponsePayload maskedCard(MaskedCard maskedCard) {
    this.maskedCard = maskedCard;
    return this;
  }

   /**
   * Get maskedCard
   * @return maskedCard
  **/
  @jakarta.annotation.Nonnull
  public MaskedCard getMaskedCard() {
    return maskedCard;
  }

  public void setMaskedCard(MaskedCard maskedCard) {
    this.maskedCard = maskedCard;
  }


  public CheckoutResponsePayload maskedConsumer(MaskedConsumer maskedConsumer) {
    this.maskedConsumer = maskedConsumer;
    return this;
  }

   /**
   * Get maskedConsumer
   * @return maskedConsumer
  **/
  @jakarta.annotation.Nullable
  public MaskedConsumer getMaskedConsumer() {
    return maskedConsumer;
  }

  public void setMaskedConsumer(MaskedConsumer maskedConsumer) {
    this.maskedConsumer = maskedConsumer;
  }


  public CheckoutResponsePayload shippingAddressZip(String shippingAddressZip) {
    this.shippingAddressZip = shippingAddressZip;
    return this;
  }

   /**
   * The shipping postal code (for example, zipcode in the U.S.)
   * @return shippingAddressZip
  **/
  @jakarta.annotation.Nullable
  public String getShippingAddressZip() {
    return shippingAddressZip;
  }

  public void setShippingAddressZip(String shippingAddressZip) {
    this.shippingAddressZip = shippingAddressZip;
  }


  public CheckoutResponsePayload shippingCountryCode(String shippingCountryCode) {
    this.shippingCountryCode = shippingCountryCode;
    return this;
  }

   /**
   * Consumer-provided country code.ISO 3166 alpha 2 country code.
   * @return shippingCountryCode
  **/
  @jakarta.annotation.Nullable
  public String getShippingCountryCode() {
    return shippingCountryCode;
  }

  public void setShippingCountryCode(String shippingCountryCode) {
    this.shippingCountryCode = shippingCountryCode;
  }


  public CheckoutResponsePayload assuranceData(AssuranceData assuranceData) {
    this.assuranceData = assuranceData;
    return this;
  }

   /**
   * Get assuranceData
   * @return assuranceData
  **/
  @jakarta.annotation.Nullable
  public AssuranceData getAssuranceData() {
    return assuranceData;
  }

  public void setAssuranceData(AssuranceData assuranceData) {
    this.assuranceData = assuranceData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CheckoutResponsePayload instance itself
   */
  public CheckoutResponsePayload putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutResponsePayload checkoutResponsePayload = (CheckoutResponsePayload) o;
    return Objects.equals(this.srcCorrelationId, checkoutResponsePayload.srcCorrelationId) &&
        Objects.equals(this.srciTransactionId, checkoutResponsePayload.srciTransactionId) &&
        Objects.equals(this.encryptedPayload, checkoutResponsePayload.encryptedPayload) &&
        Objects.equals(this.maskedCard, checkoutResponsePayload.maskedCard) &&
        Objects.equals(this.maskedConsumer, checkoutResponsePayload.maskedConsumer) &&
        Objects.equals(this.shippingAddressZip, checkoutResponsePayload.shippingAddressZip) &&
        Objects.equals(this.shippingCountryCode, checkoutResponsePayload.shippingCountryCode) &&
        Objects.equals(this.assuranceData, checkoutResponsePayload.assuranceData)&&
        Objects.equals(this.additionalProperties, checkoutResponsePayload.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcCorrelationId, srciTransactionId, encryptedPayload, maskedCard, maskedConsumer, shippingAddressZip, shippingCountryCode, assuranceData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutResponsePayload {\n");
    sb.append("    srcCorrelationId: ").append(toIndentedString(srcCorrelationId)).append("\n");
    sb.append("    srciTransactionId: ").append(toIndentedString(srciTransactionId)).append("\n");
    sb.append("    encryptedPayload: ").append(toIndentedString(encryptedPayload)).append("\n");
    sb.append("    maskedCard: ").append(toIndentedString(maskedCard)).append("\n");
    sb.append("    maskedConsumer: ").append(toIndentedString(maskedConsumer)).append("\n");
    sb.append("    shippingAddressZip: ").append(toIndentedString(shippingAddressZip)).append("\n");
    sb.append("    shippingCountryCode: ").append(toIndentedString(shippingCountryCode)).append("\n");
    sb.append("    assuranceData: ").append(toIndentedString(assuranceData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcCorrelationId");
    openapiFields.add("srciTransactionId");
    openapiFields.add("encryptedPayload");
    openapiFields.add("maskedCard");
    openapiFields.add("maskedConsumer");
    openapiFields.add("shippingAddressZip");
    openapiFields.add("shippingCountryCode");
    openapiFields.add("assuranceData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcCorrelationId");
    openapiRequiredFields.add("maskedCard");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CheckoutResponsePayload
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutResponsePayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutResponsePayload is not found in the empty JSON string", CheckoutResponsePayload.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutResponsePayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcCorrelationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcCorrelationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcCorrelationId").toString()));
      }
      if ((jsonObj.get("srciTransactionId") != null && !jsonObj.get("srciTransactionId").isJsonNull()) && !jsonObj.get("srciTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srciTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srciTransactionId").toString()));
      }
      // validate the optional field `encryptedPayload`
      if (jsonObj.get("encryptedPayload") != null && !jsonObj.get("encryptedPayload").isJsonNull()) {
        Payload.validateJsonElement(jsonObj.get("encryptedPayload"));
      }
      // validate the required field `maskedCard`
      MaskedCard.validateJsonElement(jsonObj.get("maskedCard"));
      // validate the optional field `maskedConsumer`
      if (jsonObj.get("maskedConsumer") != null && !jsonObj.get("maskedConsumer").isJsonNull()) {
        MaskedConsumer.validateJsonElement(jsonObj.get("maskedConsumer"));
      }
      if ((jsonObj.get("shippingAddressZip") != null && !jsonObj.get("shippingAddressZip").isJsonNull()) && !jsonObj.get("shippingAddressZip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingAddressZip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingAddressZip").toString()));
      }
      if ((jsonObj.get("shippingCountryCode") != null && !jsonObj.get("shippingCountryCode").isJsonNull()) && !jsonObj.get("shippingCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingCountryCode").toString()));
      }
      // validate the optional field `assuranceData`
      if (jsonObj.get("assuranceData") != null && !jsonObj.get("assuranceData").isJsonNull()) {
        AssuranceData.validateJsonElement(jsonObj.get("assuranceData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutResponsePayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutResponsePayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutResponsePayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutResponsePayload.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutResponsePayload>() {
           @Override
           public void write(JsonWriter out, CheckoutResponsePayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutResponsePayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             CheckoutResponsePayload instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CheckoutResponsePayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CheckoutResponsePayload
  * @throws IOException if the JSON string is invalid with respect to CheckoutResponsePayload
  */
  public static CheckoutResponsePayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutResponsePayload.class);
  }

 /**
  * Convert an instance of CheckoutResponsePayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

