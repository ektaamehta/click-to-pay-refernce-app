/*
 * Confirmations API
 * Click to Pay checkout used by SRC Initiators to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout. Refer to the EMVCo-Secure-Remote-Commerce-Specifications-API-1.0
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.confirmations.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.confirmations.model.AddressPreference;
import com.mcs.clicktopay.confirmations.model.PaymentOptions;
import com.mcs.clicktopay.confirmations.model.ThreeDsPreference;
import com.mcs.clicktopay.confirmations.model.TransactionAmount;
import com.mcs.clicktopay.confirmations.model.TransactionType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.confirmations.invoker.JSON;

/**
 * DpaTransactionOptions
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:03.225795086Z[Etc/UTC]")
public class DpaTransactionOptions {
  public static final String SERIALIZED_NAME_TRANSACTION_AMOUNT = "transactionAmount";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_AMOUNT)
  private TransactionAmount transactionAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private TransactionType transactionType;

  public static final String SERIALIZED_NAME_DPA_BILLING_PREFERENCE = "dpaBillingPreference";
  @SerializedName(SERIALIZED_NAME_DPA_BILLING_PREFERENCE)
  private AddressPreference dpaBillingPreference;

  public static final String SERIALIZED_NAME_DPA_ACCEPTED_BILLING_COUNTRIES = "dpaAcceptedBillingCountries";
  @SerializedName(SERIALIZED_NAME_DPA_ACCEPTED_BILLING_COUNTRIES)
  private List<String> dpaAcceptedBillingCountries;

  public static final String SERIALIZED_NAME_DPA_SHIPPING_PREFERENCE = "dpaShippingPreference";
  @SerializedName(SERIALIZED_NAME_DPA_SHIPPING_PREFERENCE)
  private AddressPreference dpaShippingPreference;

  public static final String SERIALIZED_NAME_DPA_ACCEPTED_SHIPPING_COUNTRIES = "dpaAcceptedShippingCountries";
  @SerializedName(SERIALIZED_NAME_DPA_ACCEPTED_SHIPPING_COUNTRIES)
  private List<String> dpaAcceptedShippingCountries;

  public static final String SERIALIZED_NAME_CONSUMER_EMAIL_ADDRESS_REQUESTED = "consumerEmailAddressRequested";
  @SerializedName(SERIALIZED_NAME_CONSUMER_EMAIL_ADDRESS_REQUESTED)
  private Boolean consumerEmailAddressRequested;

  public static final String SERIALIZED_NAME_CONSUMER_NAME_REQUESTED = "consumerNameRequested";
  @SerializedName(SERIALIZED_NAME_CONSUMER_NAME_REQUESTED)
  private Boolean consumerNameRequested;

  public static final String SERIALIZED_NAME_CONSUMER_PHONE_NUMBER_REQUESTED = "consumerPhoneNumberRequested";
  @SerializedName(SERIALIZED_NAME_CONSUMER_PHONE_NUMBER_REQUESTED)
  private Boolean consumerPhoneNumberRequested;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchantCategoryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_MERCHANT_COUNTRY_CODE = "merchantCountryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COUNTRY_CODE)
  private String merchantCountryCode;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_ID = "merchantOrderId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_ID)
  private String merchantOrderId;

  public static final String SERIALIZED_NAME_THREE_DS_PREFERENCE = "threeDsPreference";
  @SerializedName(SERIALIZED_NAME_THREE_DS_PREFERENCE)
  private ThreeDsPreference threeDsPreference;

  public static final String SERIALIZED_NAME_THREE_DS_INPUT_DATA = "threeDsInputData";
  @SerializedName(SERIALIZED_NAME_THREE_DS_INPUT_DATA)
  private Object threeDsInputData;

  public static final String SERIALIZED_NAME_SRC_TOKEN_REQUEST_DATA = "srcTokenRequestData";
  @SerializedName(SERIALIZED_NAME_SRC_TOKEN_REQUEST_DATA)
  private Object srcTokenRequestData;

  public static final String SERIALIZED_NAME_PAYMENT_OPTIONS = "paymentOptions";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTIONS)
  private List<PaymentOptions> paymentOptions;

  public static final String SERIALIZED_NAME_DPA_LOCALE = "dpaLocale";
  @SerializedName(SERIALIZED_NAME_DPA_LOCALE)
  private String dpaLocale;

  public static final String SERIALIZED_NAME_CUSTOM_INPUT_DATA = "customInputData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_INPUT_DATA)
  private Object customInputData;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "orderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private String orderType;

  public DpaTransactionOptions() {
  }

  public DpaTransactionOptions transactionAmount(TransactionAmount transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

   /**
   * Get transactionAmount
   * @return transactionAmount
  **/
  @jakarta.annotation.Nullable
  public TransactionAmount getTransactionAmount() {
    return transactionAmount;
  }

  public void setTransactionAmount(TransactionAmount transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public DpaTransactionOptions transactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @jakarta.annotation.Nullable
  public TransactionType getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
  }


  public DpaTransactionOptions dpaBillingPreference(AddressPreference dpaBillingPreference) {
    this.dpaBillingPreference = dpaBillingPreference;
    return this;
  }

   /**
   * Get dpaBillingPreference
   * @return dpaBillingPreference
  **/
  @jakarta.annotation.Nullable
  public AddressPreference getDpaBillingPreference() {
    return dpaBillingPreference;
  }

  public void setDpaBillingPreference(AddressPreference dpaBillingPreference) {
    this.dpaBillingPreference = dpaBillingPreference;
  }


  public DpaTransactionOptions dpaAcceptedBillingCountries(List<String> dpaAcceptedBillingCountries) {
    this.dpaAcceptedBillingCountries = dpaAcceptedBillingCountries;
    return this;
  }

  public DpaTransactionOptions addDpaAcceptedBillingCountriesItem(String dpaAcceptedBillingCountriesItem) {
    if (this.dpaAcceptedBillingCountries == null) {
      this.dpaAcceptedBillingCountries = new ArrayList<>();
    }
    this.dpaAcceptedBillingCountries.add(dpaAcceptedBillingCountriesItem);
    return this;
  }

   /**
   * Merchant accepted billing countries
   * @return dpaAcceptedBillingCountries
  **/
  @jakarta.annotation.Nullable
  public List<String> getDpaAcceptedBillingCountries() {
    return dpaAcceptedBillingCountries;
  }

  public void setDpaAcceptedBillingCountries(List<String> dpaAcceptedBillingCountries) {
    this.dpaAcceptedBillingCountries = dpaAcceptedBillingCountries;
  }


  public DpaTransactionOptions dpaShippingPreference(AddressPreference dpaShippingPreference) {
    this.dpaShippingPreference = dpaShippingPreference;
    return this;
  }

   /**
   * Get dpaShippingPreference
   * @return dpaShippingPreference
  **/
  @jakarta.annotation.Nullable
  public AddressPreference getDpaShippingPreference() {
    return dpaShippingPreference;
  }

  public void setDpaShippingPreference(AddressPreference dpaShippingPreference) {
    this.dpaShippingPreference = dpaShippingPreference;
  }


  public DpaTransactionOptions dpaAcceptedShippingCountries(List<String> dpaAcceptedShippingCountries) {
    this.dpaAcceptedShippingCountries = dpaAcceptedShippingCountries;
    return this;
  }

  public DpaTransactionOptions addDpaAcceptedShippingCountriesItem(String dpaAcceptedShippingCountriesItem) {
    if (this.dpaAcceptedShippingCountries == null) {
      this.dpaAcceptedShippingCountries = new ArrayList<>();
    }
    this.dpaAcceptedShippingCountries.add(dpaAcceptedShippingCountriesItem);
    return this;
  }

   /**
   * Merchant accepted shipping countries
   * @return dpaAcceptedShippingCountries
  **/
  @jakarta.annotation.Nullable
  public List<String> getDpaAcceptedShippingCountries() {
    return dpaAcceptedShippingCountries;
  }

  public void setDpaAcceptedShippingCountries(List<String> dpaAcceptedShippingCountries) {
    this.dpaAcceptedShippingCountries = dpaAcceptedShippingCountries;
  }


  public DpaTransactionOptions consumerEmailAddressRequested(Boolean consumerEmailAddressRequested) {
    this.consumerEmailAddressRequested = consumerEmailAddressRequested;
    return this;
  }

   /**
   * Whether DPA wants consumer email ID in the Payload.
   * @return consumerEmailAddressRequested
  **/
  @jakarta.annotation.Nullable
  public Boolean getConsumerEmailAddressRequested() {
    return consumerEmailAddressRequested;
  }

  public void setConsumerEmailAddressRequested(Boolean consumerEmailAddressRequested) {
    this.consumerEmailAddressRequested = consumerEmailAddressRequested;
  }


  public DpaTransactionOptions consumerNameRequested(Boolean consumerNameRequested) {
    this.consumerNameRequested = consumerNameRequested;
    return this;
  }

   /**
   * Whether DPA wants consumer name in the Payload.
   * @return consumerNameRequested
  **/
  @jakarta.annotation.Nullable
  public Boolean getConsumerNameRequested() {
    return consumerNameRequested;
  }

  public void setConsumerNameRequested(Boolean consumerNameRequested) {
    this.consumerNameRequested = consumerNameRequested;
  }


  public DpaTransactionOptions consumerPhoneNumberRequested(Boolean consumerPhoneNumberRequested) {
    this.consumerPhoneNumberRequested = consumerPhoneNumberRequested;
    return this;
  }

   /**
   * Whether DPA wants consumer phone number in the Payload.
   * @return consumerPhoneNumberRequested
  **/
  @jakarta.annotation.Nullable
  public Boolean getConsumerPhoneNumberRequested() {
    return consumerPhoneNumberRequested;
  }

  public void setConsumerPhoneNumberRequested(Boolean consumerPhoneNumberRequested) {
    this.consumerPhoneNumberRequested = consumerPhoneNumberRequested;
  }


  public DpaTransactionOptions merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

   /**
   * Describes the Merchant&#39;s type of business, product or service.
   * @return merchantCategoryCode
  **/
  @jakarta.annotation.Nullable
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public DpaTransactionOptions merchantCountryCode(String merchantCountryCode) {
    this.merchantCountryCode = merchantCountryCode;
    return this;
  }

   /**
   * ISO 3166-1 numeric three-digit country code of the merchant.
   * @return merchantCountryCode
  **/
  @jakarta.annotation.Nullable
  public String getMerchantCountryCode() {
    return merchantCountryCode;
  }

  public void setMerchantCountryCode(String merchantCountryCode) {
    this.merchantCountryCode = merchantCountryCode;
  }


  public DpaTransactionOptions merchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
    return this;
  }

   /**
   * DPA generated order/invoice number corresponding to a consumer purchase. Typically used for reconciliation purposes by the merchant.
   * @return merchantOrderId
  **/
  @jakarta.annotation.Nullable
  public String getMerchantOrderId() {
    return merchantOrderId;
  }

  public void setMerchantOrderId(String merchantOrderId) {
    this.merchantOrderId = merchantOrderId;
  }


  public DpaTransactionOptions threeDsPreference(ThreeDsPreference threeDsPreference) {
    this.threeDsPreference = threeDsPreference;
    return this;
  }

   /**
   * Get threeDsPreference
   * @return threeDsPreference
  **/
  @jakarta.annotation.Nullable
  public ThreeDsPreference getThreeDsPreference() {
    return threeDsPreference;
  }

  public void setThreeDsPreference(ThreeDsPreference threeDsPreference) {
    this.threeDsPreference = threeDsPreference;
  }


  public DpaTransactionOptions threeDsInputData(Object threeDsInputData) {
    this.threeDsInputData = threeDsInputData;
    return this;
  }

   /**
   * Get threeDsInputData
   * @return threeDsInputData
  **/
  @jakarta.annotation.Nullable
  public Object getThreeDsInputData() {
    return threeDsInputData;
  }

  public void setThreeDsInputData(Object threeDsInputData) {
    this.threeDsInputData = threeDsInputData;
  }


  public DpaTransactionOptions srcTokenRequestData(Object srcTokenRequestData) {
    this.srcTokenRequestData = srcTokenRequestData;
    return this;
  }

   /**
   * Get srcTokenRequestData
   * @return srcTokenRequestData
  **/
  @jakarta.annotation.Nullable
  public Object getSrcTokenRequestData() {
    return srcTokenRequestData;
  }

  public void setSrcTokenRequestData(Object srcTokenRequestData) {
    this.srcTokenRequestData = srcTokenRequestData;
  }


  public DpaTransactionOptions paymentOptions(List<PaymentOptions> paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  public DpaTransactionOptions addPaymentOptionsItem(PaymentOptions paymentOptionsItem) {
    if (this.paymentOptions == null) {
      this.paymentOptions = new ArrayList<>();
    }
    this.paymentOptions.add(paymentOptionsItem);
    return this;
  }

   /**
   * Specifies the dynamic data requirement for the payload creation.
   * @return paymentOptions
  **/
  @jakarta.annotation.Nullable
  public List<PaymentOptions> getPaymentOptions() {
    return paymentOptions;
  }

  public void setPaymentOptions(List<PaymentOptions> paymentOptions) {
    this.paymentOptions = paymentOptions;
  }


  public DpaTransactionOptions dpaLocale(String dpaLocale) {
    this.dpaLocale = dpaLocale;
    return this;
  }

   /**
   * Merchant&#39;s preferred locale. This can be the same as the locale in the init parameters or can be different. Format: ISO language_country pair (e.g. &#39;en_US&#39;, &#39;fr_CA&#39;).
   * @return dpaLocale
  **/
  @jakarta.annotation.Nullable
  public String getDpaLocale() {
    return dpaLocale;
  }

  public void setDpaLocale(String dpaLocale) {
    this.dpaLocale = dpaLocale;
  }


  public DpaTransactionOptions customInputData(Object customInputData) {
    this.customInputData = customInputData;
    return this;
  }

   /**
   * Get customInputData
   * @return customInputData
  **/
  @jakarta.annotation.Nullable
  public Object getCustomInputData() {
    return customInputData;
  }

  public void setCustomInputData(Object customInputData) {
    this.customInputData = customInputData;
  }


  public DpaTransactionOptions orderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

   /**
   * Type of the order.
   * @return orderType
  **/
  @jakarta.annotation.Nullable
  public String getOrderType() {
    return orderType;
  }

  public void setOrderType(String orderType) {
    this.orderType = orderType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DpaTransactionOptions instance itself
   */
  public DpaTransactionOptions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpaTransactionOptions dpaTransactionOptions = (DpaTransactionOptions) o;
    return Objects.equals(this.transactionAmount, dpaTransactionOptions.transactionAmount) &&
        Objects.equals(this.transactionType, dpaTransactionOptions.transactionType) &&
        Objects.equals(this.dpaBillingPreference, dpaTransactionOptions.dpaBillingPreference) &&
        Objects.equals(this.dpaAcceptedBillingCountries, dpaTransactionOptions.dpaAcceptedBillingCountries) &&
        Objects.equals(this.dpaShippingPreference, dpaTransactionOptions.dpaShippingPreference) &&
        Objects.equals(this.dpaAcceptedShippingCountries, dpaTransactionOptions.dpaAcceptedShippingCountries) &&
        Objects.equals(this.consumerEmailAddressRequested, dpaTransactionOptions.consumerEmailAddressRequested) &&
        Objects.equals(this.consumerNameRequested, dpaTransactionOptions.consumerNameRequested) &&
        Objects.equals(this.consumerPhoneNumberRequested, dpaTransactionOptions.consumerPhoneNumberRequested) &&
        Objects.equals(this.merchantCategoryCode, dpaTransactionOptions.merchantCategoryCode) &&
        Objects.equals(this.merchantCountryCode, dpaTransactionOptions.merchantCountryCode) &&
        Objects.equals(this.merchantOrderId, dpaTransactionOptions.merchantOrderId) &&
        Objects.equals(this.threeDsPreference, dpaTransactionOptions.threeDsPreference) &&
        Objects.equals(this.threeDsInputData, dpaTransactionOptions.threeDsInputData) &&
        Objects.equals(this.srcTokenRequestData, dpaTransactionOptions.srcTokenRequestData) &&
        Objects.equals(this.paymentOptions, dpaTransactionOptions.paymentOptions) &&
        Objects.equals(this.dpaLocale, dpaTransactionOptions.dpaLocale) &&
        Objects.equals(this.customInputData, dpaTransactionOptions.customInputData) &&
        Objects.equals(this.orderType, dpaTransactionOptions.orderType)&&
        Objects.equals(this.additionalProperties, dpaTransactionOptions.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionAmount, transactionType, dpaBillingPreference, dpaAcceptedBillingCountries, dpaShippingPreference, dpaAcceptedShippingCountries, consumerEmailAddressRequested, consumerNameRequested, consumerPhoneNumberRequested, merchantCategoryCode, merchantCountryCode, merchantOrderId, threeDsPreference, threeDsInputData, srcTokenRequestData, paymentOptions, dpaLocale, customInputData, orderType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpaTransactionOptions {\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    dpaBillingPreference: ").append(toIndentedString(dpaBillingPreference)).append("\n");
    sb.append("    dpaAcceptedBillingCountries: ").append(toIndentedString(dpaAcceptedBillingCountries)).append("\n");
    sb.append("    dpaShippingPreference: ").append(toIndentedString(dpaShippingPreference)).append("\n");
    sb.append("    dpaAcceptedShippingCountries: ").append(toIndentedString(dpaAcceptedShippingCountries)).append("\n");
    sb.append("    consumerEmailAddressRequested: ").append(toIndentedString(consumerEmailAddressRequested)).append("\n");
    sb.append("    consumerNameRequested: ").append(toIndentedString(consumerNameRequested)).append("\n");
    sb.append("    consumerPhoneNumberRequested: ").append(toIndentedString(consumerPhoneNumberRequested)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    merchantCountryCode: ").append(toIndentedString(merchantCountryCode)).append("\n");
    sb.append("    merchantOrderId: ").append(toIndentedString(merchantOrderId)).append("\n");
    sb.append("    threeDsPreference: ").append(toIndentedString(threeDsPreference)).append("\n");
    sb.append("    threeDsInputData: ").append(toIndentedString(threeDsInputData)).append("\n");
    sb.append("    srcTokenRequestData: ").append(toIndentedString(srcTokenRequestData)).append("\n");
    sb.append("    paymentOptions: ").append(toIndentedString(paymentOptions)).append("\n");
    sb.append("    dpaLocale: ").append(toIndentedString(dpaLocale)).append("\n");
    sb.append("    customInputData: ").append(toIndentedString(customInputData)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionAmount");
    openapiFields.add("transactionType");
    openapiFields.add("dpaBillingPreference");
    openapiFields.add("dpaAcceptedBillingCountries");
    openapiFields.add("dpaShippingPreference");
    openapiFields.add("dpaAcceptedShippingCountries");
    openapiFields.add("consumerEmailAddressRequested");
    openapiFields.add("consumerNameRequested");
    openapiFields.add("consumerPhoneNumberRequested");
    openapiFields.add("merchantCategoryCode");
    openapiFields.add("merchantCountryCode");
    openapiFields.add("merchantOrderId");
    openapiFields.add("threeDsPreference");
    openapiFields.add("threeDsInputData");
    openapiFields.add("srcTokenRequestData");
    openapiFields.add("paymentOptions");
    openapiFields.add("dpaLocale");
    openapiFields.add("customInputData");
    openapiFields.add("orderType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DpaTransactionOptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DpaTransactionOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DpaTransactionOptions is not found in the empty JSON string", DpaTransactionOptions.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `transactionAmount`
      if (jsonObj.get("transactionAmount") != null && !jsonObj.get("transactionAmount").isJsonNull()) {
        TransactionAmount.validateJsonElement(jsonObj.get("transactionAmount"));
      }
      // validate the optional field `transactionType`
      if (jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) {
        TransactionType.validateJsonElement(jsonObj.get("transactionType"));
      }
      // validate the optional field `dpaBillingPreference`
      if (jsonObj.get("dpaBillingPreference") != null && !jsonObj.get("dpaBillingPreference").isJsonNull()) {
        AddressPreference.validateJsonElement(jsonObj.get("dpaBillingPreference"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dpaAcceptedBillingCountries") != null && !jsonObj.get("dpaAcceptedBillingCountries").isJsonNull() && !jsonObj.get("dpaAcceptedBillingCountries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpaAcceptedBillingCountries` to be an array in the JSON string but got `%s`", jsonObj.get("dpaAcceptedBillingCountries").toString()));
      }
      // validate the optional field `dpaShippingPreference`
      if (jsonObj.get("dpaShippingPreference") != null && !jsonObj.get("dpaShippingPreference").isJsonNull()) {
        AddressPreference.validateJsonElement(jsonObj.get("dpaShippingPreference"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dpaAcceptedShippingCountries") != null && !jsonObj.get("dpaAcceptedShippingCountries").isJsonNull() && !jsonObj.get("dpaAcceptedShippingCountries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpaAcceptedShippingCountries` to be an array in the JSON string but got `%s`", jsonObj.get("dpaAcceptedShippingCountries").toString()));
      }
      if ((jsonObj.get("merchantCategoryCode") != null && !jsonObj.get("merchantCategoryCode").isJsonNull()) && !jsonObj.get("merchantCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategoryCode").toString()));
      }
      if ((jsonObj.get("merchantCountryCode") != null && !jsonObj.get("merchantCountryCode").isJsonNull()) && !jsonObj.get("merchantCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCountryCode").toString()));
      }
      if ((jsonObj.get("merchantOrderId") != null && !jsonObj.get("merchantOrderId").isJsonNull()) && !jsonObj.get("merchantOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantOrderId").toString()));
      }
      // validate the optional field `threeDsPreference`
      if (jsonObj.get("threeDsPreference") != null && !jsonObj.get("threeDsPreference").isJsonNull()) {
        ThreeDsPreference.validateJsonElement(jsonObj.get("threeDsPreference"));
      }
      if (jsonObj.get("paymentOptions") != null && !jsonObj.get("paymentOptions").isJsonNull()) {
        JsonArray jsonArraypaymentOptions = jsonObj.getAsJsonArray("paymentOptions");
        if (jsonArraypaymentOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentOptions` to be an array in the JSON string but got `%s`", jsonObj.get("paymentOptions").toString()));
          }

          // validate the optional field `paymentOptions` (array)
          for (int i = 0; i < jsonArraypaymentOptions.size(); i++) {
            PaymentOptions.validateJsonElement(jsonArraypaymentOptions.get(i));
          };
        }
      }
      if ((jsonObj.get("dpaLocale") != null && !jsonObj.get("dpaLocale").isJsonNull()) && !jsonObj.get("dpaLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpaLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpaLocale").toString()));
      }
      if ((jsonObj.get("orderType") != null && !jsonObj.get("orderType").isJsonNull()) && !jsonObj.get("orderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DpaTransactionOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DpaTransactionOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DpaTransactionOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DpaTransactionOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<DpaTransactionOptions>() {
           @Override
           public void write(JsonWriter out, DpaTransactionOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DpaTransactionOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DpaTransactionOptions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DpaTransactionOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DpaTransactionOptions
  * @throws IOException if the JSON string is invalid with respect to DpaTransactionOptions
  */
  public static DpaTransactionOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DpaTransactionOptions.class);
  }

 /**
  * Convert an instance of DpaTransactionOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

