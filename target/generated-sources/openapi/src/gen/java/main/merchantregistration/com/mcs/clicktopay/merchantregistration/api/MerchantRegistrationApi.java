/*
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.merchantregistration.api;

import com.mcs.clicktopay.merchantregistration.invoker.ApiCallback;
import com.mcs.clicktopay.merchantregistration.invoker.ApiClient;
import com.mcs.clicktopay.merchantregistration.invoker.ApiException;
import com.mcs.clicktopay.merchantregistration.invoker.ApiResponse;
import com.mcs.clicktopay.merchantregistration.invoker.Configuration;
import com.mcs.clicktopay.merchantregistration.invoker.Pair;
import com.mcs.clicktopay.merchantregistration.invoker.ProgressRequestBody;
import com.mcs.clicktopay.merchantregistration.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mcs.clicktopay.merchantregistration.model.DpaAddUpdateRequest;
import com.mcs.clicktopay.merchantregistration.model.DpaAddUpdateResponse;
import com.mcs.clicktopay.merchantregistration.model.DpaBatchStatus;
import com.mcs.clicktopay.merchantregistration.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantRegistrationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantRegistrationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantRegistrationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bulkAddUpdateDpa
     * @param correlationId A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param dpaAddUpdateRequest DPA asynchronous/bulk Registration Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error object for details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, see error object for details, e.g. client identity (origin) not validated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, see error object for details  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkAddUpdateDpaCall(String correlationId, String srcClientId, DpaAddUpdateRequest dpaAddUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dpaAddUpdateRequest;

        // create path and map variables
        String localVarPath = "/srci/{src-client-id}/dpas/batch"
            .replace("{" + "src-client-id" + "}", localVarApiClient.escapeString(srcClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (correlationId != null) {
            localVarHeaderParams.put("correlation-id", localVarApiClient.parameterToString(correlationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkAddUpdateDpaValidateBeforeCall(String correlationId, String srcClientId, DpaAddUpdateRequest dpaAddUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlationId' is set
        if (correlationId == null) {
            throw new ApiException("Missing the required parameter 'correlationId' when calling bulkAddUpdateDpa(Async)");
        }

        // verify the required parameter 'srcClientId' is set
        if (srcClientId == null) {
            throw new ApiException("Missing the required parameter 'srcClientId' when calling bulkAddUpdateDpa(Async)");
        }

        // verify the required parameter 'dpaAddUpdateRequest' is set
        if (dpaAddUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'dpaAddUpdateRequest' when calling bulkAddUpdateDpa(Async)");
        }

        return bulkAddUpdateDpaCall(correlationId, srcClientId, dpaAddUpdateRequest, _callback);

    }

    /**
     * Asynchronous - DPA bulk Add/Update/Delete
     * This is a composite API and performs the following functions in a single call.   * ADD -- Add the DPA record.  * UPDATE -- Update the DPA record.  * DELETE --Delete the DPA record   Additionally, this request can be used to generate serviceIds in Commerce Platform use cases.   A Digital Payment Application (DPA) is a website, web or mobile application operated by a Merchant, marketplace, or other service provider where a consumer can purchase goods or services.   A ServiceId is a unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded. A serviceId can have multiple associated DPAs.   This request must contain the following values, for detail please refer to the Body Model description::     * items    * action    * programType   The contents of the DPA items will vary based on the operation requested.   Note:  * For UPDATE operations, only DPA data are updated. Once registered, a DPA cannot be associated with a new serviceId or programType. A new DPA will need to be ADDed for each programType/serviceId.  * It is recommended to provide **either** ADD **or** UPDATE across different items within the same batch of DPA Registration API 
     * @param correlationId A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param dpaAddUpdateRequest DPA asynchronous/bulk Registration Request (required)
     * @return DpaAddUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error object for details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, see error object for details, e.g. client identity (origin) not validated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, see error object for details  </td><td>  -  </td></tr>
     </table>
     */
    public DpaAddUpdateResponse bulkAddUpdateDpa(String correlationId, String srcClientId, DpaAddUpdateRequest dpaAddUpdateRequest) throws ApiException {
        ApiResponse<DpaAddUpdateResponse> localVarResp = bulkAddUpdateDpaWithHttpInfo(correlationId, srcClientId, dpaAddUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Asynchronous - DPA bulk Add/Update/Delete
     * This is a composite API and performs the following functions in a single call.   * ADD -- Add the DPA record.  * UPDATE -- Update the DPA record.  * DELETE --Delete the DPA record   Additionally, this request can be used to generate serviceIds in Commerce Platform use cases.   A Digital Payment Application (DPA) is a website, web or mobile application operated by a Merchant, marketplace, or other service provider where a consumer can purchase goods or services.   A ServiceId is a unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded. A serviceId can have multiple associated DPAs.   This request must contain the following values, for detail please refer to the Body Model description::     * items    * action    * programType   The contents of the DPA items will vary based on the operation requested.   Note:  * For UPDATE operations, only DPA data are updated. Once registered, a DPA cannot be associated with a new serviceId or programType. A new DPA will need to be ADDed for each programType/serviceId.  * It is recommended to provide **either** ADD **or** UPDATE across different items within the same batch of DPA Registration API 
     * @param correlationId A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param dpaAddUpdateRequest DPA asynchronous/bulk Registration Request (required)
     * @return ApiResponse&lt;DpaAddUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error object for details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, see error object for details, e.g. client identity (origin) not validated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, see error object for details  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DpaAddUpdateResponse> bulkAddUpdateDpaWithHttpInfo(String correlationId, String srcClientId, DpaAddUpdateRequest dpaAddUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkAddUpdateDpaValidateBeforeCall(correlationId, srcClientId, dpaAddUpdateRequest, null);
        Type localVarReturnType = new TypeToken<DpaAddUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Asynchronous - DPA bulk Add/Update/Delete (asynchronously)
     * This is a composite API and performs the following functions in a single call.   * ADD -- Add the DPA record.  * UPDATE -- Update the DPA record.  * DELETE --Delete the DPA record   Additionally, this request can be used to generate serviceIds in Commerce Platform use cases.   A Digital Payment Application (DPA) is a website, web or mobile application operated by a Merchant, marketplace, or other service provider where a consumer can purchase goods or services.   A ServiceId is a unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded. A serviceId can have multiple associated DPAs.   This request must contain the following values, for detail please refer to the Body Model description::     * items    * action    * programType   The contents of the DPA items will vary based on the operation requested.   Note:  * For UPDATE operations, only DPA data are updated. Once registered, a DPA cannot be associated with a new serviceId or programType. A new DPA will need to be ADDed for each programType/serviceId.  * It is recommended to provide **either** ADD **or** UPDATE across different items within the same batch of DPA Registration API 
     * @param correlationId A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param dpaAddUpdateRequest DPA asynchronous/bulk Registration Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error object for details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, see error object for details, e.g. client identity (origin) not validated </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, see error object for details  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkAddUpdateDpaAsync(String correlationId, String srcClientId, DpaAddUpdateRequest dpaAddUpdateRequest, final ApiCallback<DpaAddUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkAddUpdateDpaValidateBeforeCall(correlationId, srcClientId, dpaAddUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<DpaAddUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDpaBatchStatus
     * @param correlationId A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param batchId A unique identifier associated with the submitted Digital Payment Application (DPA) batch. The Batch ID can be used to retrieve the status of the batch by calling GET DPA status endpoint. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error object for details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, see error object for details, e.g. client identity (origin) not validated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found, see error object for details.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, see error object for details  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDpaBatchStatusCall(String correlationId, String srcClientId, String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/srci/{src-client-id}/dpas/batch/status/{batch-id}"
            .replace("{" + "src-client-id" + "}", localVarApiClient.escapeString(srcClientId.toString()))
            .replace("{" + "batch-id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (correlationId != null) {
            localVarHeaderParams.put("correlation-id", localVarApiClient.parameterToString(correlationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDpaBatchStatusValidateBeforeCall(String correlationId, String srcClientId, String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlationId' is set
        if (correlationId == null) {
            throw new ApiException("Missing the required parameter 'correlationId' when calling getDpaBatchStatus(Async)");
        }

        // verify the required parameter 'srcClientId' is set
        if (srcClientId == null) {
            throw new ApiException("Missing the required parameter 'srcClientId' when calling getDpaBatchStatus(Async)");
        }

        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling getDpaBatchStatus(Async)");
        }

        return getDpaBatchStatusCall(correlationId, srcClientId, batchId, _callback);

    }

    /**
     * Get status of the DPA Add/Update async (batch) job by Batch ID.
     * The GET Status API allows the SRC Initiator to retrieve the status of a DPA Registration request submitted earlier.
     * @param correlationId A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param batchId A unique identifier associated with the submitted Digital Payment Application (DPA) batch. The Batch ID can be used to retrieve the status of the batch by calling GET DPA status endpoint. (required)
     * @return DpaBatchStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error object for details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, see error object for details, e.g. client identity (origin) not validated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found, see error object for details.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, see error object for details  </td><td>  -  </td></tr>
     </table>
     */
    public DpaBatchStatus getDpaBatchStatus(String correlationId, String srcClientId, String batchId) throws ApiException {
        ApiResponse<DpaBatchStatus> localVarResp = getDpaBatchStatusWithHttpInfo(correlationId, srcClientId, batchId);
        return localVarResp.getData();
    }

    /**
     * Get status of the DPA Add/Update async (batch) job by Batch ID.
     * The GET Status API allows the SRC Initiator to retrieve the status of a DPA Registration request submitted earlier.
     * @param correlationId A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param batchId A unique identifier associated with the submitted Digital Payment Application (DPA) batch. The Batch ID can be used to retrieve the status of the batch by calling GET DPA status endpoint. (required)
     * @return ApiResponse&lt;DpaBatchStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error object for details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, see error object for details, e.g. client identity (origin) not validated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found, see error object for details.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, see error object for details  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DpaBatchStatus> getDpaBatchStatusWithHttpInfo(String correlationId, String srcClientId, String batchId) throws ApiException {
        okhttp3.Call localVarCall = getDpaBatchStatusValidateBeforeCall(correlationId, srcClientId, batchId, null);
        Type localVarReturnType = new TypeToken<DpaBatchStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status of the DPA Add/Update async (batch) job by Batch ID. (asynchronously)
     * The GET Status API allows the SRC Initiator to retrieve the status of a DPA Registration request submitted earlier.
     * @param correlationId A unique identifier that correlates a series of two or more requests to a single session of activity. Mastercard Checkout Solutions (MCS) will return a new srcCorrelationId in each response by default, but Integrators may choose to populate previously used srcCorrelationIds in subsequent requests to correlate their activity under a single ID. This can be done by providing a Mastercard generated srcCorrelationId in the request, or by generating your own ID in the same format. SrcCorrelationId is used for tracking and troubleshooting purposes within Mastercard&#39;s ecosystem. (required)
     * @param srcClientId A unique identifier assigned by Mastercard during onboarding which signifies the responsible party Integrating to Mastercard Checkout Solutions (MCS). (required)
     * @param batchId A unique identifier associated with the submitted Digital Payment Application (DPA) batch. The Batch ID can be used to retrieve the status of the batch by calling GET DPA status endpoint. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error object for details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, see error object for details, e.g. authorization token validation failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden, see error object for details, e.g. client identity (origin) not validated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found, see error object for details.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error, see error object for details  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDpaBatchStatusAsync(String correlationId, String srcClientId, String batchId, final ApiCallback<DpaBatchStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDpaBatchStatusValidateBeforeCall(correlationId, srcClientId, batchId, _callback);
        Type localVarReturnType = new TypeToken<DpaBatchStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
