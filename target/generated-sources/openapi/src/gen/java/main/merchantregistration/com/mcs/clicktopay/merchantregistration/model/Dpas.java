/*
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.merchantregistration.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.merchantregistration.model.AcquirerData;
import com.mcs.clicktopay.merchantregistration.model.DpaData;
import com.mcs.clicktopay.merchantregistration.model.ThreeDSDefaultData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.merchantregistration.invoker.JSON;

/**
 * Dpas
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:00.060603Z[Etc/UTC]")
public class Dpas {
  public static final String SERIALIZED_NAME_SRC_DPA_ID = "srcDpaId";
  @SerializedName(SERIALIZED_NAME_SRC_DPA_ID)
  private String srcDpaId;

  /**
   * Indicates if the Digital Payment Application (DPA) has an Acquirer relationship. This field may be used to improve acceptance rates.
   */
  @JsonAdapter(HasAcquirerRelationshipEnum.Adapter.class)
  public enum HasAcquirerRelationshipEnum {
    Y("Y"),
    
    N("N");

    private String value;

    HasAcquirerRelationshipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HasAcquirerRelationshipEnum fromValue(String value) {
      for (HasAcquirerRelationshipEnum b : HasAcquirerRelationshipEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HasAcquirerRelationshipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HasAcquirerRelationshipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HasAcquirerRelationshipEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HasAcquirerRelationshipEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HasAcquirerRelationshipEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HAS_ACQUIRER_RELATIONSHIP = "hasAcquirerRelationship";
  @SerializedName(SERIALIZED_NAME_HAS_ACQUIRER_RELATIONSHIP)
  private HasAcquirerRelationshipEnum hasAcquirerRelationship;

  public static final String SERIALIZED_NAME_SUB_MERCHANT_ID = "subMerchantId";
  @SerializedName(SERIALIZED_NAME_SUB_MERCHANT_ID)
  private String subMerchantId;

  public static final String SERIALIZED_NAME_PAYMENT_FACILITATOR_ID = "paymentFacilitatorId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_FACILITATOR_ID)
  private String paymentFacilitatorId;

  public static final String SERIALIZED_NAME_DPA_DATA = "dpaData";
  @SerializedName(SERIALIZED_NAME_DPA_DATA)
  private DpaData dpaData;

  public static final String SERIALIZED_NAME_DEBIT_TOKEN_REQUESTED = "debitTokenRequested";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DEBIT_TOKEN_REQUESTED)
  private Boolean debitTokenRequested;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODES = "merchantCategoryCodes";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODES)
  private List<String> merchantCategoryCodes;

  public static final String SERIALIZED_NAME_THREE_D_S_DEFAULTDATA = "threeDSDefaultdata";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_DEFAULTDATA)
  private ThreeDSDefaultData threeDSDefaultdata;

  public static final String SERIALIZED_NAME_ACQUIRER_DATA = "acquirerData";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_DATA)
  private List<AcquirerData> acquirerData;

  public Dpas() {
  }

  public Dpas srcDpaId(String srcDpaId) {
    this.srcDpaId = srcDpaId;
    return this;
  }

   /**
   *  The registered identifier for the Digital Payment Application (DPA) accessing the service. At least one DPA needs to be registered for each Merchant/Merchant OBO/Sub-Merchant (PF) needed, with additional DPAs being added as required.  Conditional: Required if you are a Merchant directly integrating with Mastercard Checkout Solutions (MCS) APIs, a Payment Service Provider (PSP) integrating On-Behalf-Of (OBO) a Merchant, a Payment Facilitator, or if you are enrolling in the Secure Card on File (SCOF) QR program. 
   * @return srcDpaId
  **/
  @jakarta.annotation.Nonnull
  public String getSrcDpaId() {
    return srcDpaId;
  }

  public void setSrcDpaId(String srcDpaId) {
    this.srcDpaId = srcDpaId;
  }


  public Dpas hasAcquirerRelationship(HasAcquirerRelationshipEnum hasAcquirerRelationship) {
    this.hasAcquirerRelationship = hasAcquirerRelationship;
    return this;
  }

   /**
   * Indicates if the Digital Payment Application (DPA) has an Acquirer relationship. This field may be used to improve acceptance rates.
   * @return hasAcquirerRelationship
  **/
  @jakarta.annotation.Nullable
  public HasAcquirerRelationshipEnum getHasAcquirerRelationship() {
    return hasAcquirerRelationship;
  }

  public void setHasAcquirerRelationship(HasAcquirerRelationshipEnum hasAcquirerRelationship) {
    this.hasAcquirerRelationship = hasAcquirerRelationship;
  }


  public Dpas subMerchantId(String subMerchantId) {
    this.subMerchantId = subMerchantId;
    return this;
  }

   /**
   * Identifier assigned to a Sub-Merchant by the Payment Facilitator (PF). This field may be used to improve transaction security and acceptance rates.
   * @return subMerchantId
  **/
  @jakarta.annotation.Nullable
  public String getSubMerchantId() {
    return subMerchantId;
  }

  public void setSubMerchantId(String subMerchantId) {
    this.subMerchantId = subMerchantId;
  }


  public Dpas paymentFacilitatorId(String paymentFacilitatorId) {
    this.paymentFacilitatorId = paymentFacilitatorId;
    return this;
  }

   /**
   * Payment Facilitator (PF) identifier that may be used to improve transaction security and acceptance rates.
   * @return paymentFacilitatorId
  **/
  @jakarta.annotation.Nullable
  public String getPaymentFacilitatorId() {
    return paymentFacilitatorId;
  }

  public void setPaymentFacilitatorId(String paymentFacilitatorId) {
    this.paymentFacilitatorId = paymentFacilitatorId;
  }


  public Dpas dpaData(DpaData dpaData) {
    this.dpaData = dpaData;
    return this;
  }

   /**
   * Get dpaData
   * @return dpaData
  **/
  @jakarta.annotation.Nullable
  public DpaData getDpaData() {
    return dpaData;
  }

  public void setDpaData(DpaData dpaData) {
    this.dpaData = dpaData;
  }


  @Deprecated
  public Dpas debitTokenRequested(Boolean debitTokenRequested) {
    this.debitTokenRequested = debitTokenRequested;
    return this;
  }

   /**
   * **Deprecated** A flag for the Integrator to indicate that they would not like to have their Cardholder&#39;s debit cards tokenized. 
   * @return debitTokenRequested
   * @deprecated
  **/
  @Deprecated
  @jakarta.annotation.Nullable
  public Boolean getDebitTokenRequested() {
    return debitTokenRequested;
  }

  @Deprecated
  public void setDebitTokenRequested(Boolean debitTokenRequested) {
    this.debitTokenRequested = debitTokenRequested;
  }


  public Dpas merchantCategoryCodes(List<String> merchantCategoryCodes) {
    this.merchantCategoryCodes = merchantCategoryCodes;
    return this;
  }

  public Dpas addMerchantCategoryCodesItem(String merchantCategoryCodesItem) {
    if (this.merchantCategoryCodes == null) {
      this.merchantCategoryCodes = new ArrayList<>();
    }
    this.merchantCategoryCodes.add(merchantCategoryCodesItem);
    return this;
  }

   /**
   * Object for the array of Merchant Category Codes (MCC) that the Merchant processes transactions under, and is used for risk-scoring transactions by the issuer. All MCC codes that will be processed by a DPA should be provided here (typically, this will be a single item).  An MCC is a four-character code assigned by Mastercard to the Merchant that indicates the type of business, service, or product provided by the Merchant.  Note: MCC&#39;s may be assigned differently across payment networks. To avoid errors, be sure to use your assigned Mastercard MCC. This code is required for 3-D Secure (3DS) and risk profiling. If the Merchant has more than one MCC, the code most relevant to their business should be used. 
   * @return merchantCategoryCodes
  **/
  @jakarta.annotation.Nullable
  public List<String> getMerchantCategoryCodes() {
    return merchantCategoryCodes;
  }

  public void setMerchantCategoryCodes(List<String> merchantCategoryCodes) {
    this.merchantCategoryCodes = merchantCategoryCodes;
  }


  public Dpas threeDSDefaultdata(ThreeDSDefaultData threeDSDefaultdata) {
    this.threeDSDefaultdata = threeDSDefaultdata;
    return this;
  }

   /**
   * Get threeDSDefaultdata
   * @return threeDSDefaultdata
  **/
  @jakarta.annotation.Nullable
  public ThreeDSDefaultData getThreeDSDefaultdata() {
    return threeDSDefaultdata;
  }

  public void setThreeDSDefaultdata(ThreeDSDefaultData threeDSDefaultdata) {
    this.threeDSDefaultdata = threeDSDefaultdata;
  }


  public Dpas acquirerData(List<AcquirerData> acquirerData) {
    this.acquirerData = acquirerData;
    return this;
  }

  public Dpas addAcquirerDataItem(AcquirerData acquirerDataItem) {
    if (this.acquirerData == null) {
      this.acquirerData = new ArrayList<>();
    }
    this.acquirerData.add(acquirerDataItem);
    return this;
  }

   /**
   * Get acquirerData
   * @return acquirerData
  **/
  @jakarta.annotation.Nullable
  public List<AcquirerData> getAcquirerData() {
    return acquirerData;
  }

  public void setAcquirerData(List<AcquirerData> acquirerData) {
    this.acquirerData = acquirerData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Dpas instance itself
   */
  public Dpas putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dpas dpas = (Dpas) o;
    return Objects.equals(this.srcDpaId, dpas.srcDpaId) &&
        Objects.equals(this.hasAcquirerRelationship, dpas.hasAcquirerRelationship) &&
        Objects.equals(this.subMerchantId, dpas.subMerchantId) &&
        Objects.equals(this.paymentFacilitatorId, dpas.paymentFacilitatorId) &&
        Objects.equals(this.dpaData, dpas.dpaData) &&
        Objects.equals(this.debitTokenRequested, dpas.debitTokenRequested) &&
        Objects.equals(this.merchantCategoryCodes, dpas.merchantCategoryCodes) &&
        Objects.equals(this.threeDSDefaultdata, dpas.threeDSDefaultdata) &&
        Objects.equals(this.acquirerData, dpas.acquirerData)&&
        Objects.equals(this.additionalProperties, dpas.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(srcDpaId, hasAcquirerRelationship, subMerchantId, paymentFacilitatorId, dpaData, debitTokenRequested, merchantCategoryCodes, threeDSDefaultdata, acquirerData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dpas {\n");
    sb.append("    srcDpaId: ").append(toIndentedString(srcDpaId)).append("\n");
    sb.append("    hasAcquirerRelationship: ").append(toIndentedString(hasAcquirerRelationship)).append("\n");
    sb.append("    subMerchantId: ").append(toIndentedString(subMerchantId)).append("\n");
    sb.append("    paymentFacilitatorId: ").append(toIndentedString(paymentFacilitatorId)).append("\n");
    sb.append("    dpaData: ").append(toIndentedString(dpaData)).append("\n");
    sb.append("    debitTokenRequested: ").append(toIndentedString(debitTokenRequested)).append("\n");
    sb.append("    merchantCategoryCodes: ").append(toIndentedString(merchantCategoryCodes)).append("\n");
    sb.append("    threeDSDefaultdata: ").append(toIndentedString(threeDSDefaultdata)).append("\n");
    sb.append("    acquirerData: ").append(toIndentedString(acquirerData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("srcDpaId");
    openapiFields.add("hasAcquirerRelationship");
    openapiFields.add("subMerchantId");
    openapiFields.add("paymentFacilitatorId");
    openapiFields.add("dpaData");
    openapiFields.add("debitTokenRequested");
    openapiFields.add("merchantCategoryCodes");
    openapiFields.add("threeDSDefaultdata");
    openapiFields.add("acquirerData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("srcDpaId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dpas
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dpas.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dpas is not found in the empty JSON string", Dpas.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Dpas.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("srcDpaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcDpaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcDpaId").toString()));
      }
      if ((jsonObj.get("hasAcquirerRelationship") != null && !jsonObj.get("hasAcquirerRelationship").isJsonNull()) && !jsonObj.get("hasAcquirerRelationship").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hasAcquirerRelationship` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hasAcquirerRelationship").toString()));
      }
      // validate the optional field `hasAcquirerRelationship`
      if (jsonObj.get("hasAcquirerRelationship") != null && !jsonObj.get("hasAcquirerRelationship").isJsonNull()) {
        HasAcquirerRelationshipEnum.validateJsonElement(jsonObj.get("hasAcquirerRelationship"));
      }
      if ((jsonObj.get("subMerchantId") != null && !jsonObj.get("subMerchantId").isJsonNull()) && !jsonObj.get("subMerchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subMerchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subMerchantId").toString()));
      }
      if ((jsonObj.get("paymentFacilitatorId") != null && !jsonObj.get("paymentFacilitatorId").isJsonNull()) && !jsonObj.get("paymentFacilitatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentFacilitatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentFacilitatorId").toString()));
      }
      // validate the optional field `dpaData`
      if (jsonObj.get("dpaData") != null && !jsonObj.get("dpaData").isJsonNull()) {
        DpaData.validateJsonElement(jsonObj.get("dpaData"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("merchantCategoryCodes") != null && !jsonObj.get("merchantCategoryCodes").isJsonNull() && !jsonObj.get("merchantCategoryCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategoryCodes` to be an array in the JSON string but got `%s`", jsonObj.get("merchantCategoryCodes").toString()));
      }
      // validate the optional field `threeDSDefaultdata`
      if (jsonObj.get("threeDSDefaultdata") != null && !jsonObj.get("threeDSDefaultdata").isJsonNull()) {
        ThreeDSDefaultData.validateJsonElement(jsonObj.get("threeDSDefaultdata"));
      }
      if (jsonObj.get("acquirerData") != null && !jsonObj.get("acquirerData").isJsonNull()) {
        JsonArray jsonArrayacquirerData = jsonObj.getAsJsonArray("acquirerData");
        if (jsonArrayacquirerData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("acquirerData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `acquirerData` to be an array in the JSON string but got `%s`", jsonObj.get("acquirerData").toString()));
          }

          // validate the optional field `acquirerData` (array)
          for (int i = 0; i < jsonArrayacquirerData.size(); i++) {
            AcquirerData.validateJsonElement(jsonArrayacquirerData.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dpas.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dpas' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dpas> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dpas.class));

       return (TypeAdapter<T>) new TypeAdapter<Dpas>() {
           @Override
           public void write(JsonWriter out, Dpas value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Dpas read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Dpas instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dpas given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dpas
  * @throws IOException if the JSON string is invalid with respect to Dpas
  */
  public static Dpas fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dpas.class);
  }

 /**
  * Convert an instance of Dpas to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

