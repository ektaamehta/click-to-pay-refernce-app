/*
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.merchantregistration.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.merchantregistration.model.DpaResults;
import com.mcs.clicktopay.merchantregistration.model.Error;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.merchantregistration.invoker.JSON;

/**
 * BatchStatusItems
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:00.060603Z[Etc/UTC]")
public class BatchStatusItems {
  /**
   * The action to be performed on the Digital Payment Application (DPA). The selected action will be applied to all DPAs provided in the items list.  __ADD__ - Add DPA  __UPDATE__ - Update DPA  __DELETE__ - Delete DPA  Note: A limited number of DPA fields can be changed using the &#39;UPDATE&#39; action. These are dpaPresentationName, dpaLogoUri, merchantCategoryCode and threeDSDefaultData. Please refer to the example for a minimal use case. 
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ADD("ADD"),
    
    UPDATE("UPDATE"),
    
    DELETE("DELETE");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_TRID = "trid";
  @SerializedName(SERIALIZED_NAME_TRID)
  private String trid;

  public static final String SERIALIZED_NAME_PROGRAM_NAME = "programName";
  @SerializedName(SERIALIZED_NAME_PROGRAM_NAME)
  private String programName;

  /**
   * Indicates the status of an individual Digital Payment Application (DPA) item in a batch.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCESSFUL("SUCCESSFUL"),
    
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Error error;

  public static final String SERIALIZED_NAME_DPA_RESULTS = "dpaResults";
  @SerializedName(SERIALIZED_NAME_DPA_RESULTS)
  private List<DpaResults> dpaResults;

  public BatchStatusItems() {
  }

  public BatchStatusItems action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * The action to be performed on the Digital Payment Application (DPA). The selected action will be applied to all DPAs provided in the items list.  __ADD__ - Add DPA  __UPDATE__ - Update DPA  __DELETE__ - Delete DPA  Note: A limited number of DPA fields can be changed using the &#39;UPDATE&#39; action. These are dpaPresentationName, dpaLogoUri, merchantCategoryCode and threeDSDefaultData. Please refer to the example for a minimal use case. 
   * @return action
  **/
  @jakarta.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public BatchStatusItems serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

   /**
   * A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded.
   * @return serviceId
  **/
  @jakarta.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public BatchStatusItems trid(String trid) {
    this.trid = trid;
    return this;
  }

   /**
   * Token Requestors receive a unique identifier, TRID, which represents the consumer-facing entity name to the Issuer  during the tokenization process. This identifier has a one-to-one relationship with the serviceId. &lt;br&gt; &lt;br&gt; Note: Reach out to your Mastercard representative to begin receiving trid in API responses. 
   * @return trid
  **/
  @jakarta.annotation.Nullable
  public String getTrid() {
    return trid;
  }

  public void setTrid(String trid) {
    this.trid = trid;
  }


  public BatchStatusItems programName(String programName) {
    this.programName = programName;
    return this;
  }

   /**
   * The Cardholder facing name of the Merchant.  Conditional: Must be supplied when adding Merchants to a Payment Facilitator (PF) program.\&quot; 
   * @return programName
  **/
  @jakarta.annotation.Nullable
  public String getProgramName() {
    return programName;
  }

  public void setProgramName(String programName) {
    this.programName = programName;
  }


  public BatchStatusItems status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Indicates the status of an individual Digital Payment Application (DPA) item in a batch.
   * @return status
  **/
  @jakarta.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public BatchStatusItems error(Error error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @jakarta.annotation.Nullable
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }


  public BatchStatusItems dpaResults(List<DpaResults> dpaResults) {
    this.dpaResults = dpaResults;
    return this;
  }

  public BatchStatusItems addDpaResultsItem(DpaResults dpaResultsItem) {
    if (this.dpaResults == null) {
      this.dpaResults = new ArrayList<>();
    }
    this.dpaResults.add(dpaResultsItem);
    return this;
  }

   /**
   * Get dpaResults
   * @return dpaResults
  **/
  @jakarta.annotation.Nullable
  public List<DpaResults> getDpaResults() {
    return dpaResults;
  }

  public void setDpaResults(List<DpaResults> dpaResults) {
    this.dpaResults = dpaResults;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BatchStatusItems instance itself
   */
  public BatchStatusItems putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchStatusItems batchStatusItems = (BatchStatusItems) o;
    return Objects.equals(this.action, batchStatusItems.action) &&
        Objects.equals(this.serviceId, batchStatusItems.serviceId) &&
        Objects.equals(this.trid, batchStatusItems.trid) &&
        Objects.equals(this.programName, batchStatusItems.programName) &&
        Objects.equals(this.status, batchStatusItems.status) &&
        Objects.equals(this.error, batchStatusItems.error) &&
        Objects.equals(this.dpaResults, batchStatusItems.dpaResults)&&
        Objects.equals(this.additionalProperties, batchStatusItems.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, serviceId, trid, programName, status, error, dpaResults, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchStatusItems {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    trid: ").append(toIndentedString(trid)).append("\n");
    sb.append("    programName: ").append(toIndentedString(programName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    dpaResults: ").append(toIndentedString(dpaResults)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("serviceId");
    openapiFields.add("trid");
    openapiFields.add("programName");
    openapiFields.add("status");
    openapiFields.add("error");
    openapiFields.add("dpaResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BatchStatusItems
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchStatusItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchStatusItems is not found in the empty JSON string", BatchStatusItems.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("trid") != null && !jsonObj.get("trid").isJsonNull()) && !jsonObj.get("trid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trid").toString()));
      }
      if ((jsonObj.get("programName") != null && !jsonObj.get("programName").isJsonNull()) && !jsonObj.get("programName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        Error.validateJsonElement(jsonObj.get("error"));
      }
      if (jsonObj.get("dpaResults") != null && !jsonObj.get("dpaResults").isJsonNull()) {
        JsonArray jsonArraydpaResults = jsonObj.getAsJsonArray("dpaResults");
        if (jsonArraydpaResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dpaResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dpaResults` to be an array in the JSON string but got `%s`", jsonObj.get("dpaResults").toString()));
          }

          // validate the optional field `dpaResults` (array)
          for (int i = 0; i < jsonArraydpaResults.size(); i++) {
            DpaResults.validateJsonElement(jsonArraydpaResults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchStatusItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchStatusItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchStatusItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchStatusItems.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchStatusItems>() {
           @Override
           public void write(JsonWriter out, BatchStatusItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchStatusItems read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             BatchStatusItems instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BatchStatusItems given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BatchStatusItems
  * @throws IOException if the JSON string is invalid with respect to BatchStatusItems
  */
  public static BatchStatusItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchStatusItems.class);
  }

 /**
  * Convert an instance of BatchStatusItems to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

