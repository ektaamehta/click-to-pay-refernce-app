/*
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.merchantregistration.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.merchantregistration.invoker.JSON;

/**
 * Enables a Merchant to supply their existing 3-D Secure (3DS) integration details at the time of Digital Payment Application (DPA) registration.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:00.060603Z[Etc/UTC]")
public class ThreeDSDefaultData {
  public static final String SERIALIZED_NAME_DEFAULT_ACQUIRER_BIN = "defaultAcquirerBin";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACQUIRER_BIN)
  private String defaultAcquirerBin;

  public static final String SERIALIZED_NAME_DEFAULT_ACQUIRER_MERCHANT_ID = "defaultAcquirerMerchantId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACQUIRER_MERCHANT_ID)
  private String defaultAcquirerMerchantId;

  public static final String SERIALIZED_NAME_DEFAULT_MERCHANT_COUNTRY_CODE = "defaultMerchantCountryCode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MERCHANT_COUNTRY_CODE)
  private String defaultMerchantCountryCode;

  public static final String SERIALIZED_NAME_DEFAULT_MERCHANT_CATEGORY_CODE = "defaultMerchantCategoryCode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MERCHANT_CATEGORY_CODE)
  private String defaultMerchantCategoryCode;

  public ThreeDSDefaultData() {
  }

  public ThreeDSDefaultData defaultAcquirerBin(String defaultAcquirerBin) {
    this.defaultAcquirerBin = defaultAcquirerBin;
    return this;
  }

   /**
   * Allows a Merchant to set a default Acquirer. An Acquirer BIN is an identifier assigned by Mastercard to an Acquirer.  If this field is not defined and acquirerData has only one entry, this field will be populated with the value from acquirerBin. 
   * @return defaultAcquirerBin
  **/
  @jakarta.annotation.Nullable
  public String getDefaultAcquirerBin() {
    return defaultAcquirerBin;
  }

  public void setDefaultAcquirerBin(String defaultAcquirerBin) {
    this.defaultAcquirerBin = defaultAcquirerBin;
  }


  public ThreeDSDefaultData defaultAcquirerMerchantId(String defaultAcquirerMerchantId) {
    this.defaultAcquirerMerchantId = defaultAcquirerMerchantId;
    return this;
  }

   /**
   * An identifier assigned to the Merchant by their Acquirer. If this field is not populated and acquirerData has only one entry, this field will be populated with the value from acquirerMerchantId.
   * @return defaultAcquirerMerchantId
  **/
  @jakarta.annotation.Nullable
  public String getDefaultAcquirerMerchantId() {
    return defaultAcquirerMerchantId;
  }

  public void setDefaultAcquirerMerchantId(String defaultAcquirerMerchantId) {
    this.defaultAcquirerMerchantId = defaultAcquirerMerchantId;
  }


  public ThreeDSDefaultData defaultMerchantCountryCode(String defaultMerchantCountryCode) {
    this.defaultMerchantCountryCode = defaultMerchantCountryCode;
    return this;
  }

   /**
   * Allows a Merchant to set a default Merchant Country Code (CC).  A Merchant CC is a two-character code indicating the country the Merchant is doing business in. 
   * @return defaultMerchantCountryCode
  **/
  @jakarta.annotation.Nullable
  public String getDefaultMerchantCountryCode() {
    return defaultMerchantCountryCode;
  }

  public void setDefaultMerchantCountryCode(String defaultMerchantCountryCode) {
    this.defaultMerchantCountryCode = defaultMerchantCountryCode;
  }


  public ThreeDSDefaultData defaultMerchantCategoryCode(String defaultMerchantCategoryCode) {
    this.defaultMerchantCategoryCode = defaultMerchantCategoryCode;
    return this;
  }

   /**
   * Allows a Merchant to set a default Merchant Category Code (MCC).  An MCC is a four-character code assigned by Mastercard to the Merchant that indicates the type of business, service, or product provided by the Merchant.  Note: MCC&#39;s may be assigned differently across payment networks. To avoid errors, be sure to use your assigned Mastercard MCC. This code is required for 3-D Secure (3DS) and risk profiling. If the Merchant has more than one MCC, the code most relevant to their business should be used. 
   * @return defaultMerchantCategoryCode
  **/
  @jakarta.annotation.Nullable
  public String getDefaultMerchantCategoryCode() {
    return defaultMerchantCategoryCode;
  }

  public void setDefaultMerchantCategoryCode(String defaultMerchantCategoryCode) {
    this.defaultMerchantCategoryCode = defaultMerchantCategoryCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ThreeDSDefaultData instance itself
   */
  public ThreeDSDefaultData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDSDefaultData threeDSDefaultData = (ThreeDSDefaultData) o;
    return Objects.equals(this.defaultAcquirerBin, threeDSDefaultData.defaultAcquirerBin) &&
        Objects.equals(this.defaultAcquirerMerchantId, threeDSDefaultData.defaultAcquirerMerchantId) &&
        Objects.equals(this.defaultMerchantCountryCode, threeDSDefaultData.defaultMerchantCountryCode) &&
        Objects.equals(this.defaultMerchantCategoryCode, threeDSDefaultData.defaultMerchantCategoryCode)&&
        Objects.equals(this.additionalProperties, threeDSDefaultData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultAcquirerBin, defaultAcquirerMerchantId, defaultMerchantCountryCode, defaultMerchantCategoryCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDSDefaultData {\n");
    sb.append("    defaultAcquirerBin: ").append(toIndentedString(defaultAcquirerBin)).append("\n");
    sb.append("    defaultAcquirerMerchantId: ").append(toIndentedString(defaultAcquirerMerchantId)).append("\n");
    sb.append("    defaultMerchantCountryCode: ").append(toIndentedString(defaultMerchantCountryCode)).append("\n");
    sb.append("    defaultMerchantCategoryCode: ").append(toIndentedString(defaultMerchantCategoryCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultAcquirerBin");
    openapiFields.add("defaultAcquirerMerchantId");
    openapiFields.add("defaultMerchantCountryCode");
    openapiFields.add("defaultMerchantCategoryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ThreeDSDefaultData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThreeDSDefaultData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreeDSDefaultData is not found in the empty JSON string", ThreeDSDefaultData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultAcquirerBin") != null && !jsonObj.get("defaultAcquirerBin").isJsonNull()) && !jsonObj.get("defaultAcquirerBin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAcquirerBin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAcquirerBin").toString()));
      }
      if ((jsonObj.get("defaultAcquirerMerchantId") != null && !jsonObj.get("defaultAcquirerMerchantId").isJsonNull()) && !jsonObj.get("defaultAcquirerMerchantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAcquirerMerchantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAcquirerMerchantId").toString()));
      }
      if ((jsonObj.get("defaultMerchantCountryCode") != null && !jsonObj.get("defaultMerchantCountryCode").isJsonNull()) && !jsonObj.get("defaultMerchantCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultMerchantCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultMerchantCountryCode").toString()));
      }
      if ((jsonObj.get("defaultMerchantCategoryCode") != null && !jsonObj.get("defaultMerchantCategoryCode").isJsonNull()) && !jsonObj.get("defaultMerchantCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultMerchantCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultMerchantCategoryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreeDSDefaultData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreeDSDefaultData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreeDSDefaultData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreeDSDefaultData.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreeDSDefaultData>() {
           @Override
           public void write(JsonWriter out, ThreeDSDefaultData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreeDSDefaultData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ThreeDSDefaultData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ThreeDSDefaultData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ThreeDSDefaultData
  * @throws IOException if the JSON string is invalid with respect to ThreeDSDefaultData
  */
  public static ThreeDSDefaultData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreeDSDefaultData.class);
  }

 /**
  * Convert an instance of ThreeDSDefaultData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

