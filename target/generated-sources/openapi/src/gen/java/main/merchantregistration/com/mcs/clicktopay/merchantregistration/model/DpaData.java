/*
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.merchantregistration.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.merchantregistration.model.Address;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.merchantregistration.invoker.JSON;

/**
 * DpaData Object for Integrator to populate Digital Payment Application (DPA) information, including the Merchant name, address, and other relevant data. 
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:00.060603Z[Etc/UTC]")
public class DpaData {
  public static final String SERIALIZED_NAME_DPA_PRESENTATION_NAME = "dpaPresentationName";
  @SerializedName(SERIALIZED_NAME_DPA_PRESENTATION_NAME)
  private String dpaPresentationName;

  public static final String SERIALIZED_NAME_DPA_ADDRESS = "dpaAddress";
  @SerializedName(SERIALIZED_NAME_DPA_ADDRESS)
  private Address dpaAddress;

  public static final String SERIALIZED_NAME_DPA_NAME = "dpaName";
  @SerializedName(SERIALIZED_NAME_DPA_NAME)
  private String dpaName;

  public static final String SERIALIZED_NAME_DPA_LOGO_URI = "dpaLogoUri";
  @SerializedName(SERIALIZED_NAME_DPA_LOGO_URI)
  private String dpaLogoUri;

  public static final String SERIALIZED_NAME_DPA_URI = "dpaUri";
  @SerializedName(SERIALIZED_NAME_DPA_URI)
  private String dpaUri;

  public DpaData() {
  }

  public DpaData dpaPresentationName(String dpaPresentationName) {
    this.dpaPresentationName = dpaPresentationName;
    return this;
  }

   /**
   * The name of the Merchant that the Cardholder will see when checking out with the Digital Payment Application (DPA).  Conditional: Required for Guest Checkout Tokenization (GCT) and SQR programs. 
   * @return dpaPresentationName
  **/
  @jakarta.annotation.Nullable
  public String getDpaPresentationName() {
    return dpaPresentationName;
  }

  public void setDpaPresentationName(String dpaPresentationName) {
    this.dpaPresentationName = dpaPresentationName;
  }


  public DpaData dpaAddress(Address dpaAddress) {
    this.dpaAddress = dpaAddress;
    return this;
  }

   /**
   * Get dpaAddress
   * @return dpaAddress
  **/
  @jakarta.annotation.Nullable
  public Address getDpaAddress() {
    return dpaAddress;
  }

  public void setDpaAddress(Address dpaAddress) {
    this.dpaAddress = dpaAddress;
  }


  public DpaData dpaName(String dpaName) {
    this.dpaName = dpaName;
    return this;
  }

   /**
   * Legal name of Merchant (which may differ from dpaPresentationName). Only the special characters defined in the pattern are permitted.
   * @return dpaName
  **/
  @jakarta.annotation.Nullable
  public String getDpaName() {
    return dpaName;
  }

  public void setDpaName(String dpaName) {
    this.dpaName = dpaName;
  }


  public DpaData dpaLogoUri(String dpaLogoUri) {
    this.dpaLogoUri = dpaLogoUri;
    return this;
  }

   /**
   * URI for the logo displayed to Cardholders during C2P checkout.
   * @return dpaLogoUri
  **/
  @jakarta.annotation.Nullable
  public String getDpaLogoUri() {
    return dpaLogoUri;
  }

  public void setDpaLogoUri(String dpaLogoUri) {
    this.dpaLogoUri = dpaLogoUri;
  }


  public DpaData dpaUri(String dpaUri) {
    this.dpaUri = dpaUri;
    return this;
  }

   /**
   * URI for your merchant&#39;s site for handling all Checkout transactions.
   * @return dpaUri
  **/
  @jakarta.annotation.Nullable
  public String getDpaUri() {
    return dpaUri;
  }

  public void setDpaUri(String dpaUri) {
    this.dpaUri = dpaUri;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DpaData instance itself
   */
  public DpaData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpaData dpaData = (DpaData) o;
    return Objects.equals(this.dpaPresentationName, dpaData.dpaPresentationName) &&
        Objects.equals(this.dpaAddress, dpaData.dpaAddress) &&
        Objects.equals(this.dpaName, dpaData.dpaName) &&
        Objects.equals(this.dpaLogoUri, dpaData.dpaLogoUri) &&
        Objects.equals(this.dpaUri, dpaData.dpaUri)&&
        Objects.equals(this.additionalProperties, dpaData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dpaPresentationName, dpaAddress, dpaName, dpaLogoUri, dpaUri, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpaData {\n");
    sb.append("    dpaPresentationName: ").append(toIndentedString(dpaPresentationName)).append("\n");
    sb.append("    dpaAddress: ").append(toIndentedString(dpaAddress)).append("\n");
    sb.append("    dpaName: ").append(toIndentedString(dpaName)).append("\n");
    sb.append("    dpaLogoUri: ").append(toIndentedString(dpaLogoUri)).append("\n");
    sb.append("    dpaUri: ").append(toIndentedString(dpaUri)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dpaPresentationName");
    openapiFields.add("dpaAddress");
    openapiFields.add("dpaName");
    openapiFields.add("dpaLogoUri");
    openapiFields.add("dpaUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DpaData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DpaData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DpaData is not found in the empty JSON string", DpaData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dpaPresentationName") != null && !jsonObj.get("dpaPresentationName").isJsonNull()) && !jsonObj.get("dpaPresentationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpaPresentationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpaPresentationName").toString()));
      }
      // validate the optional field `dpaAddress`
      if (jsonObj.get("dpaAddress") != null && !jsonObj.get("dpaAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("dpaAddress"));
      }
      if ((jsonObj.get("dpaName") != null && !jsonObj.get("dpaName").isJsonNull()) && !jsonObj.get("dpaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpaName").toString()));
      }
      if ((jsonObj.get("dpaLogoUri") != null && !jsonObj.get("dpaLogoUri").isJsonNull()) && !jsonObj.get("dpaLogoUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpaLogoUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpaLogoUri").toString()));
      }
      if ((jsonObj.get("dpaUri") != null && !jsonObj.get("dpaUri").isJsonNull()) && !jsonObj.get("dpaUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dpaUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dpaUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DpaData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DpaData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DpaData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DpaData.class));

       return (TypeAdapter<T>) new TypeAdapter<DpaData>() {
           @Override
           public void write(JsonWriter out, DpaData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DpaData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DpaData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DpaData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DpaData
  * @throws IOException if the JSON string is invalid with respect to DpaData
  */
  public static DpaData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DpaData.class);
  }

 /**
  * Convert an instance of DpaData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

