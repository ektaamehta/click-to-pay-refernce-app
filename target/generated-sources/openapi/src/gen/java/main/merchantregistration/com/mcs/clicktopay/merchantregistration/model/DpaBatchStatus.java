/*
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.merchantregistration.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.merchantregistration.model.BatchStatusItems;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.merchantregistration.invoker.JSON;

/**
 * The DpaBatchStatus response contains information related to the status of a submitted Digital Payment Application (DPA) batch.
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:00.060603Z[Etc/UTC]")
public class DpaBatchStatus {
  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_BATCH_ID = "batchId";
  @SerializedName(SERIALIZED_NAME_BATCH_ID)
  private String batchId;

  /**
   * Describes the outcome of the submitted Digital Payment Application (DPA) batch. Possible outcomes include:  * COMPLETED_SUCCESSFULLY - Batch was completed successfully and all DPAs included in the batch are ready to transact.  * COMPLETED_WITH_ERRORS - Batch was completed successfully, but some DPAs included in the batch aren&#39;t ready to transact.  * FAILED -  Batch failed to load.  * IN_PROGRESS - Batch processing in progress.  For a full breakdown of all DPA outcomes in a batch, refer to the items. 
   */
  @JsonAdapter(BatchStatusEnum.Adapter.class)
  public enum BatchStatusEnum {
    COMPLETED_SUCCESSFULLY("COMPLETED_SUCCESSFULLY"),
    
    COMPLETED_WITH_ERRORS("COMPLETED_WITH_ERRORS"),
    
    FAILED("FAILED"),
    
    IN_PROGRESS("IN_PROGRESS");

    private String value;

    BatchStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BatchStatusEnum fromValue(String value) {
      for (BatchStatusEnum b : BatchStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BatchStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BatchStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BatchStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BatchStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BatchStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BATCH_STATUS = "batchStatus";
  @SerializedName(SERIALIZED_NAME_BATCH_STATUS)
  private BatchStatusEnum batchStatus;

  public static final String SERIALIZED_NAME_BATCH_START_TIME = "batchStartTime";
  @SerializedName(SERIALIZED_NAME_BATCH_START_TIME)
  private String batchStartTime;

  public static final String SERIALIZED_NAME_BATCH_END_TIME = "batchEndTime";
  @SerializedName(SERIALIZED_NAME_BATCH_END_TIME)
  private String batchEndTime;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<BatchStatusItems> items;

  public DpaBatchStatus() {
  }

  public DpaBatchStatus requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * This field allows the Integrator to assign an internal reference to a batch request so that it can be used for internal tracking purposes.
   * @return requestId
  **/
  @jakarta.annotation.Nullable
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public DpaBatchStatus batchId(String batchId) {
    this.batchId = batchId;
    return this;
  }

   /**
   * A unique identifier associated with the submitted Digital Payment Application (DPA) batch. The Batch ID can be used to retrieve the status of the batch by calling GET DPA status endpoint.
   * @return batchId
  **/
  @jakarta.annotation.Nullable
  public String getBatchId() {
    return batchId;
  }

  public void setBatchId(String batchId) {
    this.batchId = batchId;
  }


  public DpaBatchStatus batchStatus(BatchStatusEnum batchStatus) {
    this.batchStatus = batchStatus;
    return this;
  }

   /**
   * Describes the outcome of the submitted Digital Payment Application (DPA) batch. Possible outcomes include:  * COMPLETED_SUCCESSFULLY - Batch was completed successfully and all DPAs included in the batch are ready to transact.  * COMPLETED_WITH_ERRORS - Batch was completed successfully, but some DPAs included in the batch aren&#39;t ready to transact.  * FAILED -  Batch failed to load.  * IN_PROGRESS - Batch processing in progress.  For a full breakdown of all DPA outcomes in a batch, refer to the items. 
   * @return batchStatus
  **/
  @jakarta.annotation.Nullable
  public BatchStatusEnum getBatchStatus() {
    return batchStatus;
  }

  public void setBatchStatus(BatchStatusEnum batchStatus) {
    this.batchStatus = batchStatus;
  }


  public DpaBatchStatus batchStartTime(String batchStartTime) {
    this.batchStartTime = batchStartTime;
    return this;
  }

   /**
   * Start time of batch request
   * @return batchStartTime
  **/
  @jakarta.annotation.Nullable
  public String getBatchStartTime() {
    return batchStartTime;
  }

  public void setBatchStartTime(String batchStartTime) {
    this.batchStartTime = batchStartTime;
  }


  public DpaBatchStatus batchEndTime(String batchEndTime) {
    this.batchEndTime = batchEndTime;
    return this;
  }

   /**
   * End time of batch request
   * @return batchEndTime
  **/
  @jakarta.annotation.Nullable
  public String getBatchEndTime() {
    return batchEndTime;
  }

  public void setBatchEndTime(String batchEndTime) {
    this.batchEndTime = batchEndTime;
  }


  public DpaBatchStatus errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Provides additional information when batchStatus yields a FAILED status.
   * @return errorMessage
  **/
  @jakarta.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public DpaBatchStatus items(List<BatchStatusItems> items) {
    this.items = items;
    return this;
  }

  public DpaBatchStatus addItemsItem(BatchStatusItems itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * An array of status objects that describes the outcome of each Digital Payment Application (DPA) item in a batch request.  Note: DPA item order may differ from original submission.\&quot; 
   * @return items
  **/
  @jakarta.annotation.Nullable
  public List<BatchStatusItems> getItems() {
    return items;
  }

  public void setItems(List<BatchStatusItems> items) {
    this.items = items;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DpaBatchStatus instance itself
   */
  public DpaBatchStatus putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpaBatchStatus dpaBatchStatus = (DpaBatchStatus) o;
    return Objects.equals(this.requestId, dpaBatchStatus.requestId) &&
        Objects.equals(this.batchId, dpaBatchStatus.batchId) &&
        Objects.equals(this.batchStatus, dpaBatchStatus.batchStatus) &&
        Objects.equals(this.batchStartTime, dpaBatchStatus.batchStartTime) &&
        Objects.equals(this.batchEndTime, dpaBatchStatus.batchEndTime) &&
        Objects.equals(this.errorMessage, dpaBatchStatus.errorMessage) &&
        Objects.equals(this.items, dpaBatchStatus.items)&&
        Objects.equals(this.additionalProperties, dpaBatchStatus.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, batchId, batchStatus, batchStartTime, batchEndTime, errorMessage, items, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpaBatchStatus {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    batchStatus: ").append(toIndentedString(batchStatus)).append("\n");
    sb.append("    batchStartTime: ").append(toIndentedString(batchStartTime)).append("\n");
    sb.append("    batchEndTime: ").append(toIndentedString(batchEndTime)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestId");
    openapiFields.add("batchId");
    openapiFields.add("batchStatus");
    openapiFields.add("batchStartTime");
    openapiFields.add("batchEndTime");
    openapiFields.add("errorMessage");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DpaBatchStatus
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DpaBatchStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DpaBatchStatus is not found in the empty JSON string", DpaBatchStatus.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("requestId") != null && !jsonObj.get("requestId").isJsonNull()) && !jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if ((jsonObj.get("batchId") != null && !jsonObj.get("batchId").isJsonNull()) && !jsonObj.get("batchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchId").toString()));
      }
      if ((jsonObj.get("batchStatus") != null && !jsonObj.get("batchStatus").isJsonNull()) && !jsonObj.get("batchStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchStatus").toString()));
      }
      // validate the optional field `batchStatus`
      if (jsonObj.get("batchStatus") != null && !jsonObj.get("batchStatus").isJsonNull()) {
        BatchStatusEnum.validateJsonElement(jsonObj.get("batchStatus"));
      }
      if ((jsonObj.get("batchStartTime") != null && !jsonObj.get("batchStartTime").isJsonNull()) && !jsonObj.get("batchStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchStartTime").toString()));
      }
      if ((jsonObj.get("batchEndTime") != null && !jsonObj.get("batchEndTime").isJsonNull()) && !jsonObj.get("batchEndTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchEndTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchEndTime").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            BatchStatusItems.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DpaBatchStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DpaBatchStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DpaBatchStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DpaBatchStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DpaBatchStatus>() {
           @Override
           public void write(JsonWriter out, DpaBatchStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DpaBatchStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DpaBatchStatus instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DpaBatchStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DpaBatchStatus
  * @throws IOException if the JSON string is invalid with respect to DpaBatchStatus
  */
  public static DpaBatchStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DpaBatchStatus.class);
  }

 /**
  * Convert an instance of DpaBatchStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

