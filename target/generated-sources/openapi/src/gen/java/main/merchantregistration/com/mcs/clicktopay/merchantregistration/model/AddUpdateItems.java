/*
 * Mastercard Checkout Solutions Merchant Registration API
 * Registration APIs for Mastercard Checkout Solutions to submit new DPA data or check status of an existing uploaded batch
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mcs.clicktopay.merchantregistration.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mcs.clicktopay.merchantregistration.model.Dpas;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mcs.clicktopay.merchantregistration.invoker.JSON;

/**
 * AddUpdateItems
 */
@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T20:17:00.060603Z[Etc/UTC]")
public class AddUpdateItems {
  /**
   * The action to be performed on the Digital Payment Application (DPA). The selected action will be applied to all DPAs provided in the items list.  ADD - Add DPA  UPDATE - Update DPA  DELETE - Delete DPA  Note: * A limited number of DPA fields can be changed using the __UPDATE__ action. These are &#x60;dpaPresentationName&#x60;, &#x60;programName&#x60;, &#x60;dpaLogoUri&#x60;, &#x60;merchantCategoryCode&#x60; and &#x60;threeDSDefaultData&#x60;. Please refer to the example for a minimal use case. * All DPA data from the original request (including non-updatable fields) will also need to be provided unchanged in the __PUT__ request for the operation to process successfully. 
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ADD("ADD"),
    
    UPDATE("UPDATE"),
    
    DELETE("DELETE");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  /**
   * The Mastercard program that the Integrator would like to add their client(s) to. The Integrator must be enrolled in the program prior to enrolling their client(s). Integrators may view their active programs in the Mastercard Connect (MC Connect) portal.  &#x60;SECURE_COF_MERCHANT&#x60; -  Integrating Merchant managing network tokenization. Tokens generated are unique for each merchant.  &#x60;SECURE_COF_MERCHANT_OBO&#x60; - Integrating Payment Service Provider (PSP) managing network tokenization for their Merchant(s). Tokens generated are unique for each merchant.  &#x60;SECURE_COF_COMMERCE_PLATFORM&#x60; - Integrating Commerce Platform managing network tokenization. Tokens are generated unique for each Commerce Platform (tokens will be shared among their marketplace).  &#x60;SECURE_COF_COMMERCE_PLATFORM_OBO&#x60; - Integrating PSPs managing network tokenization for their Commerce Platform(s). Tokens are generated unique for each Commerce Platform (tokens will be shared among their marketplace).  &#x60;SECURE_COF_MERCHANT_OBO_SHARED&#x60; - Integrating PSPs managing network tokenization for their sub-Merchants. Tokens generated are unique for each Merchant Group.  &#x60;SRC&#x60; - Integrating Merchants and PSPs participating in or offering the Click to Pay (C2P) program.  &#x60;GUEST_CHECKOUT_TOKENIZATION&#x60; - A checkout solution that uses an alternative identifier to Account PANs, generated by the issuing network for guest checkout tokenization.  Note: Other programTypes (e.g., AUTOFILL, SQR_DEVICE etc.) may be available to select regions. Please contact your Mastercard representative for more details. 
   */
  @JsonAdapter(ProgramTypeEnum.Adapter.class)
  public enum ProgramTypeEnum {
    SRC("SRC"),
    
    SECURE_COF_MERCHANT_OBO("SECURE_COF_MERCHANT_OBO"),
    
    SECURE_COF_MERCHANT("SECURE_COF_MERCHANT"),
    
    SECURE_COF_MERCHANT_OBO_SHARED("SECURE_COF_MERCHANT_OBO_SHARED"),
    
    SECURE_COF_COMMERCE_PLATFORM("SECURE_COF_COMMERCE_PLATFORM"),
    
    SECURE_COF_COMMERCE_PLATFORM_OBO("SECURE_COF_COMMERCE_PLATFORM_OBO"),
    
    SQR_DEVICE("SQR_DEVICE"),
    
    AUTOFILL("AUTOFILL"),
    
    GUEST_CHECKOUT_TOKENIZATION("GUEST_CHECKOUT_TOKENIZATION");

    private String value;

    ProgramTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProgramTypeEnum fromValue(String value) {
      for (ProgramTypeEnum b : ProgramTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProgramTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProgramTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProgramTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProgramTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProgramTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROGRAM_TYPE = "programType";
  @SerializedName(SERIALIZED_NAME_PROGRAM_TYPE)
  private ProgramTypeEnum programType;

  public static final String SERIALIZED_NAME_TRID = "trid";
  @SerializedName(SERIALIZED_NAME_TRID)
  private String trid;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_PROGRAM_NAME = "programName";
  @SerializedName(SERIALIZED_NAME_PROGRAM_NAME)
  private String programName;

  public static final String SERIALIZED_NAME_DPAS = "dpas";
  @SerializedName(SERIALIZED_NAME_DPAS)
  private List<Dpas> dpas;

  public AddUpdateItems() {
  }

  public AddUpdateItems action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * The action to be performed on the Digital Payment Application (DPA). The selected action will be applied to all DPAs provided in the items list.  ADD - Add DPA  UPDATE - Update DPA  DELETE - Delete DPA  Note: * A limited number of DPA fields can be changed using the __UPDATE__ action. These are &#x60;dpaPresentationName&#x60;, &#x60;programName&#x60;, &#x60;dpaLogoUri&#x60;, &#x60;merchantCategoryCode&#x60; and &#x60;threeDSDefaultData&#x60;. Please refer to the example for a minimal use case. * All DPA data from the original request (including non-updatable fields) will also need to be provided unchanged in the __PUT__ request for the operation to process successfully. 
   * @return action
  **/
  @jakarta.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public AddUpdateItems customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

   /**
   * Conditional: The Customer Identifier (CID) must be passed when the Integrator is acting On-Behalf-Of (OBO) a client, registering through the Mastercard Connect (MC Connect) portal, or participating in the Secure Card on File (SCOF) program.  This field should be populated with the CID of the Integrator&#39;s client (e.g., a Payment Service Provider (PSP) would pass the CID of the client they are integrating, i.e. DASP model). 
   * @return customerId
  **/
  @jakarta.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public AddUpdateItems programType(ProgramTypeEnum programType) {
    this.programType = programType;
    return this;
  }

   /**
   * The Mastercard program that the Integrator would like to add their client(s) to. The Integrator must be enrolled in the program prior to enrolling their client(s). Integrators may view their active programs in the Mastercard Connect (MC Connect) portal.  &#x60;SECURE_COF_MERCHANT&#x60; -  Integrating Merchant managing network tokenization. Tokens generated are unique for each merchant.  &#x60;SECURE_COF_MERCHANT_OBO&#x60; - Integrating Payment Service Provider (PSP) managing network tokenization for their Merchant(s). Tokens generated are unique for each merchant.  &#x60;SECURE_COF_COMMERCE_PLATFORM&#x60; - Integrating Commerce Platform managing network tokenization. Tokens are generated unique for each Commerce Platform (tokens will be shared among their marketplace).  &#x60;SECURE_COF_COMMERCE_PLATFORM_OBO&#x60; - Integrating PSPs managing network tokenization for their Commerce Platform(s). Tokens are generated unique for each Commerce Platform (tokens will be shared among their marketplace).  &#x60;SECURE_COF_MERCHANT_OBO_SHARED&#x60; - Integrating PSPs managing network tokenization for their sub-Merchants. Tokens generated are unique for each Merchant Group.  &#x60;SRC&#x60; - Integrating Merchants and PSPs participating in or offering the Click to Pay (C2P) program.  &#x60;GUEST_CHECKOUT_TOKENIZATION&#x60; - A checkout solution that uses an alternative identifier to Account PANs, generated by the issuing network for guest checkout tokenization.  Note: Other programTypes (e.g., AUTOFILL, SQR_DEVICE etc.) may be available to select regions. Please contact your Mastercard representative for more details. 
   * @return programType
  **/
  @jakarta.annotation.Nonnull
  public ProgramTypeEnum getProgramType() {
    return programType;
  }

  public void setProgramType(ProgramTypeEnum programType) {
    this.programType = programType;
  }


  public AddUpdateItems trid(String trid) {
    this.trid = trid;
    return this;
  }

   /**
   * The Token Requestor Identifier (TRID) should be passed by MDES for Merchants (M4M) Integrators who would like to onboard their M4M TRIDs to be used on Secure Card on File (SCOF).
   * @return trid
  **/
  @jakarta.annotation.Nullable
  public String getTrid() {
    return trid;
  }

  public void setTrid(String trid) {
    this.trid = trid;
  }


  public AddUpdateItems serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

   /**
   * A unique identifier assigned by Mastercard for which tokens are created uniquely for the entity onboarded.
   * @return serviceId
  **/
  @jakarta.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public AddUpdateItems category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Assign a category to the sub-merchant group identified in the request. For example, sub-merchants can be grouped by common attributes such as merchant category code (MCC), volume of transactions, or geography. Required for the SECURE_COF_MERCHANT_OBO_SHARED program type. Examples: \&quot;discount stores\&quot; and \&quot;bakeries\&quot;
   * @return category
  **/
  @jakarta.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public AddUpdateItems programName(String programName) {
    this.programName = programName;
    return this;
  }

   /**
   * The Cardholder facing name of the Merchant.  Conditional: Must be supplied when adding Merchants to all Secure Card On File (SECURE_COF) programs. 
   * @return programName
  **/
  @jakarta.annotation.Nullable
  public String getProgramName() {
    return programName;
  }

  public void setProgramName(String programName) {
    this.programName = programName;
  }


  public AddUpdateItems dpas(List<Dpas> dpas) {
    this.dpas = dpas;
    return this;
  }

  public AddUpdateItems addDpasItem(Dpas dpasItem) {
    if (this.dpas == null) {
      this.dpas = new ArrayList<>();
    }
    this.dpas.add(dpasItem);
    return this;
  }

   /**
   * Dpas  Object for Integrator to provide a list of Digital Processing Application (DPA) objects. Each DPA object is used to create a corresponding DPA. A minimum of 1 DPA object (to a maximum of 80 DPA objects) must be provided in the request. 
   * @return dpas
  **/
  @jakarta.annotation.Nullable
  public List<Dpas> getDpas() {
    return dpas;
  }

  public void setDpas(List<Dpas> dpas) {
    this.dpas = dpas;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddUpdateItems instance itself
   */
  public AddUpdateItems putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddUpdateItems addUpdateItems = (AddUpdateItems) o;
    return Objects.equals(this.action, addUpdateItems.action) &&
        Objects.equals(this.customerId, addUpdateItems.customerId) &&
        Objects.equals(this.programType, addUpdateItems.programType) &&
        Objects.equals(this.trid, addUpdateItems.trid) &&
        Objects.equals(this.serviceId, addUpdateItems.serviceId) &&
        Objects.equals(this.category, addUpdateItems.category) &&
        Objects.equals(this.programName, addUpdateItems.programName) &&
        Objects.equals(this.dpas, addUpdateItems.dpas)&&
        Objects.equals(this.additionalProperties, addUpdateItems.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, customerId, programType, trid, serviceId, category, programName, dpas, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddUpdateItems {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    programType: ").append(toIndentedString(programType)).append("\n");
    sb.append("    trid: ").append(toIndentedString(trid)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    programName: ").append(toIndentedString(programName)).append("\n");
    sb.append("    dpas: ").append(toIndentedString(dpas)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("customerId");
    openapiFields.add("programType");
    openapiFields.add("trid");
    openapiFields.add("serviceId");
    openapiFields.add("category");
    openapiFields.add("programName");
    openapiFields.add("dpas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("programType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AddUpdateItems
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddUpdateItems.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddUpdateItems is not found in the empty JSON string", AddUpdateItems.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddUpdateItems.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the required field `action`
      ActionEnum.validateJsonElement(jsonObj.get("action"));
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if (!jsonObj.get("programType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programType").toString()));
      }
      // validate the required field `programType`
      ProgramTypeEnum.validateJsonElement(jsonObj.get("programType"));
      if ((jsonObj.get("trid") != null && !jsonObj.get("trid").isJsonNull()) && !jsonObj.get("trid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trid").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("programName") != null && !jsonObj.get("programName").isJsonNull()) && !jsonObj.get("programName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `programName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("programName").toString()));
      }
      if (jsonObj.get("dpas") != null && !jsonObj.get("dpas").isJsonNull()) {
        JsonArray jsonArraydpas = jsonObj.getAsJsonArray("dpas");
        if (jsonArraydpas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dpas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dpas` to be an array in the JSON string but got `%s`", jsonObj.get("dpas").toString()));
          }

          // validate the optional field `dpas` (array)
          for (int i = 0; i < jsonArraydpas.size(); i++) {
            Dpas.validateJsonElement(jsonArraydpas.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddUpdateItems.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddUpdateItems' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddUpdateItems> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddUpdateItems.class));

       return (TypeAdapter<T>) new TypeAdapter<AddUpdateItems>() {
           @Override
           public void write(JsonWriter out, AddUpdateItems value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddUpdateItems read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AddUpdateItems instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddUpdateItems given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddUpdateItems
  * @throws IOException if the JSON string is invalid with respect to AddUpdateItems
  */
  public static AddUpdateItems fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddUpdateItems.class);
  }

 /**
  * Convert an instance of AddUpdateItems to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

